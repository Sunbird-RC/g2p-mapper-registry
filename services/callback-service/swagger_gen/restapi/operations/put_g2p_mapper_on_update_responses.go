// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutG2pMapperOnUpdateUnauthorizedCode is the HTTP code returned for type PutG2pMapperOnUpdateUnauthorized
const PutG2pMapperOnUpdateUnauthorizedCode int = 401

/*
PutG2pMapperOnUpdateUnauthorized HTTP layer error details

swagger:response putG2pMapperOnUpdateUnauthorized
*/
type PutG2pMapperOnUpdateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PutG2pMapperOnUpdateUnauthorizedBody `json:"body,omitempty"`
}

// NewPutG2pMapperOnUpdateUnauthorized creates PutG2pMapperOnUpdateUnauthorized with default headers values
func NewPutG2pMapperOnUpdateUnauthorized() *PutG2pMapperOnUpdateUnauthorized {

	return &PutG2pMapperOnUpdateUnauthorized{}
}

// WithPayload adds the payload to the put g2p mapper on update unauthorized response
func (o *PutG2pMapperOnUpdateUnauthorized) WithPayload(payload *PutG2pMapperOnUpdateUnauthorizedBody) *PutG2pMapperOnUpdateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put g2p mapper on update unauthorized response
func (o *PutG2pMapperOnUpdateUnauthorized) SetPayload(payload *PutG2pMapperOnUpdateUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutG2pMapperOnUpdateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutG2pMapperOnUpdateForbiddenCode is the HTTP code returned for type PutG2pMapperOnUpdateForbidden
const PutG2pMapperOnUpdateForbiddenCode int = 403

/*
PutG2pMapperOnUpdateForbidden HTTP layer error details

swagger:response putG2pMapperOnUpdateForbidden
*/
type PutG2pMapperOnUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *PutG2pMapperOnUpdateForbiddenBody `json:"body,omitempty"`
}

// NewPutG2pMapperOnUpdateForbidden creates PutG2pMapperOnUpdateForbidden with default headers values
func NewPutG2pMapperOnUpdateForbidden() *PutG2pMapperOnUpdateForbidden {

	return &PutG2pMapperOnUpdateForbidden{}
}

// WithPayload adds the payload to the put g2p mapper on update forbidden response
func (o *PutG2pMapperOnUpdateForbidden) WithPayload(payload *PutG2pMapperOnUpdateForbiddenBody) *PutG2pMapperOnUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put g2p mapper on update forbidden response
func (o *PutG2pMapperOnUpdateForbidden) SetPayload(payload *PutG2pMapperOnUpdateForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutG2pMapperOnUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutG2pMapperOnUpdateInternalServerErrorCode is the HTTP code returned for type PutG2pMapperOnUpdateInternalServerError
const PutG2pMapperOnUpdateInternalServerErrorCode int = 500

/*
PutG2pMapperOnUpdateInternalServerError HTTP layer error details

swagger:response putG2pMapperOnUpdateInternalServerError
*/
type PutG2pMapperOnUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PutG2pMapperOnUpdateInternalServerErrorBody `json:"body,omitempty"`
}

// NewPutG2pMapperOnUpdateInternalServerError creates PutG2pMapperOnUpdateInternalServerError with default headers values
func NewPutG2pMapperOnUpdateInternalServerError() *PutG2pMapperOnUpdateInternalServerError {

	return &PutG2pMapperOnUpdateInternalServerError{}
}

// WithPayload adds the payload to the put g2p mapper on update internal server error response
func (o *PutG2pMapperOnUpdateInternalServerError) WithPayload(payload *PutG2pMapperOnUpdateInternalServerErrorBody) *PutG2pMapperOnUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put g2p mapper on update internal server error response
func (o *PutG2pMapperOnUpdateInternalServerError) SetPayload(payload *PutG2pMapperOnUpdateInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutG2pMapperOnUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PutG2pMapperOnUpdateDefault Acknowledgement of message received after successful validation of message and signature

swagger:response putG2pMapperOnUpdateDefault
*/
type PutG2pMapperOnUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *PutG2pMapperOnUpdateDefaultBody `json:"body,omitempty"`
}

// NewPutG2pMapperOnUpdateDefault creates PutG2pMapperOnUpdateDefault with default headers values
func NewPutG2pMapperOnUpdateDefault(code int) *PutG2pMapperOnUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &PutG2pMapperOnUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put g2p mapper on update default response
func (o *PutG2pMapperOnUpdateDefault) WithStatusCode(code int) *PutG2pMapperOnUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put g2p mapper on update default response
func (o *PutG2pMapperOnUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put g2p mapper on update default response
func (o *PutG2pMapperOnUpdateDefault) WithPayload(payload *PutG2pMapperOnUpdateDefaultBody) *PutG2pMapperOnUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put g2p mapper on update default response
func (o *PutG2pMapperOnUpdateDefault) SetPayload(payload *PutG2pMapperOnUpdateDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutG2pMapperOnUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
