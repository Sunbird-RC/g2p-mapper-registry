// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetLogsHandlerFunc turns a function with the right signature into a get logs handler
type GetLogsHandlerFunc func(GetLogsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLogsHandlerFunc) Handle(params GetLogsParams) middleware.Responder {
	return fn(params)
}

// GetLogsHandler interface for that can handle valid get logs params
type GetLogsHandler interface {
	Handle(GetLogsParams) middleware.Responder
}

// NewGetLogs creates a new http.Handler for the get logs operation
func NewGetLogs(ctx *middleware.Context, handler GetLogsHandler) *GetLogs {
	return &GetLogs{Context: ctx, Handler: handler}
}

/*
	GetLogs swagger:route GET /logs getLogs

GetLogs get logs API
*/
type GetLogs struct {
	Context *middleware.Context
	Handler GetLogsHandler
}

func (o *GetLogs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLogsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLogsOKBody get logs o k body
//
// swagger:model GetLogsOKBody
type GetLogsOKBody struct {

	// logs
	Logs []string `json:"logs"`
}

// Validate validates this get logs o k body
func (o *GetLogsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get logs o k body based on context it is used
func (o *GetLogsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLogsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLogsOKBody) UnmarshalBinary(b []byte) error {
	var res GetLogsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
