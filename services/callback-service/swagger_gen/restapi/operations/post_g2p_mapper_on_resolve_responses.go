// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostG2pMapperOnResolveUnauthorizedCode is the HTTP code returned for type PostG2pMapperOnResolveUnauthorized
const PostG2pMapperOnResolveUnauthorizedCode int = 401

/*
PostG2pMapperOnResolveUnauthorized HTTP layer error details

swagger:response postG2pMapperOnResolveUnauthorized
*/
type PostG2pMapperOnResolveUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperOnResolveUnauthorizedBody `json:"body,omitempty"`
}

// NewPostG2pMapperOnResolveUnauthorized creates PostG2pMapperOnResolveUnauthorized with default headers values
func NewPostG2pMapperOnResolveUnauthorized() *PostG2pMapperOnResolveUnauthorized {

	return &PostG2pMapperOnResolveUnauthorized{}
}

// WithPayload adds the payload to the post g2p mapper on resolve unauthorized response
func (o *PostG2pMapperOnResolveUnauthorized) WithPayload(payload *PostG2pMapperOnResolveUnauthorizedBody) *PostG2pMapperOnResolveUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper on resolve unauthorized response
func (o *PostG2pMapperOnResolveUnauthorized) SetPayload(payload *PostG2pMapperOnResolveUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperOnResolveUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperOnResolveForbiddenCode is the HTTP code returned for type PostG2pMapperOnResolveForbidden
const PostG2pMapperOnResolveForbiddenCode int = 403

/*
PostG2pMapperOnResolveForbidden HTTP layer error details

swagger:response postG2pMapperOnResolveForbidden
*/
type PostG2pMapperOnResolveForbidden struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperOnResolveForbiddenBody `json:"body,omitempty"`
}

// NewPostG2pMapperOnResolveForbidden creates PostG2pMapperOnResolveForbidden with default headers values
func NewPostG2pMapperOnResolveForbidden() *PostG2pMapperOnResolveForbidden {

	return &PostG2pMapperOnResolveForbidden{}
}

// WithPayload adds the payload to the post g2p mapper on resolve forbidden response
func (o *PostG2pMapperOnResolveForbidden) WithPayload(payload *PostG2pMapperOnResolveForbiddenBody) *PostG2pMapperOnResolveForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper on resolve forbidden response
func (o *PostG2pMapperOnResolveForbidden) SetPayload(payload *PostG2pMapperOnResolveForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperOnResolveForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperOnResolveInternalServerErrorCode is the HTTP code returned for type PostG2pMapperOnResolveInternalServerError
const PostG2pMapperOnResolveInternalServerErrorCode int = 500

/*
PostG2pMapperOnResolveInternalServerError HTTP layer error details

swagger:response postG2pMapperOnResolveInternalServerError
*/
type PostG2pMapperOnResolveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperOnResolveInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostG2pMapperOnResolveInternalServerError creates PostG2pMapperOnResolveInternalServerError with default headers values
func NewPostG2pMapperOnResolveInternalServerError() *PostG2pMapperOnResolveInternalServerError {

	return &PostG2pMapperOnResolveInternalServerError{}
}

// WithPayload adds the payload to the post g2p mapper on resolve internal server error response
func (o *PostG2pMapperOnResolveInternalServerError) WithPayload(payload *PostG2pMapperOnResolveInternalServerErrorBody) *PostG2pMapperOnResolveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper on resolve internal server error response
func (o *PostG2pMapperOnResolveInternalServerError) SetPayload(payload *PostG2pMapperOnResolveInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperOnResolveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostG2pMapperOnResolveDefault Acknowledgement of message received after successful validation of message and signature

swagger:response postG2pMapperOnResolveDefault
*/
type PostG2pMapperOnResolveDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *PostG2pMapperOnResolveDefaultBody `json:"body,omitempty"`
}

// NewPostG2pMapperOnResolveDefault creates PostG2pMapperOnResolveDefault with default headers values
func NewPostG2pMapperOnResolveDefault(code int) *PostG2pMapperOnResolveDefault {
	if code <= 0 {
		code = 500
	}

	return &PostG2pMapperOnResolveDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post g2p mapper on resolve default response
func (o *PostG2pMapperOnResolveDefault) WithStatusCode(code int) *PostG2pMapperOnResolveDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post g2p mapper on resolve default response
func (o *PostG2pMapperOnResolveDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post g2p mapper on resolve default response
func (o *PostG2pMapperOnResolveDefault) WithPayload(payload *PostG2pMapperOnResolveDefaultBody) *PostG2pMapperOnResolveDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper on resolve default response
func (o *PostG2pMapperOnResolveDefault) SetPayload(payload *PostG2pMapperOnResolveDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperOnResolveDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
