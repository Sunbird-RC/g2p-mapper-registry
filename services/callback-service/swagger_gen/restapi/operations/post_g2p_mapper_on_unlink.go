// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sunbirdrc/callback-service/swagger_gen/models"
)

// PostG2pMapperOnUnlinkHandlerFunc turns a function with the right signature into a post g2p mapper on unlink handler
type PostG2pMapperOnUnlinkHandlerFunc func(PostG2pMapperOnUnlinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostG2pMapperOnUnlinkHandlerFunc) Handle(params PostG2pMapperOnUnlinkParams) middleware.Responder {
	return fn(params)
}

// PostG2pMapperOnUnlinkHandler interface for that can handle valid post g2p mapper on unlink params
type PostG2pMapperOnUnlinkHandler interface {
	Handle(PostG2pMapperOnUnlinkParams) middleware.Responder
}

// NewPostG2pMapperOnUnlink creates a new http.Handler for the post g2p mapper on unlink operation
func NewPostG2pMapperOnUnlink(ctx *middleware.Context, handler PostG2pMapperOnUnlinkHandler) *PostG2pMapperOnUnlink {
	return &PostG2pMapperOnUnlink{Context: ctx, Handler: handler}
}

/*
	PostG2pMapperOnUnlink swagger:route POST /mapper/on-unlink postG2pMapperOnUnlink

FAMAP-ON-ULNK : /mapper/on-unlink

Unlinking response through callback end point
*/
type PostG2pMapperOnUnlink struct {
	Context *middleware.Context
	Handler PostG2pMapperOnUnlinkHandler
}

func (o *PostG2pMapperOnUnlink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostG2pMapperOnUnlinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostG2pMapperOnUnlinkBody post g2p mapper on unlink body
//
// swagger:model PostG2pMapperOnUnlinkBody
type PostG2pMapperOnUnlinkBody struct {

	// header
	// Required: true
	Header struct {
		models.MsgCallbackHeader
	} `json:"header"`

	// message
	Message *PostG2pMapperOnUnlinkParamsBodyMessage `json:"message,omitempty"`

	// signature
	Signature models.MsgSignature `json:"signature,omitempty"`
}

// Validate validates this post g2p mapper on unlink body
func (o *PostG2pMapperOnUnlinkBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkBody) validateHeader(formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperOnUnlinkBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if err := o.Signature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink body based on the context it is used
func (o *PostG2pMapperOnUnlinkBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkBody) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperOnUnlinkBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signature.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkDefaultBody post g2p mapper on unlink default body
//
// swagger:model PostG2pMapperOnUnlinkDefaultBody
type PostG2pMapperOnUnlinkDefaultBody struct {

	// message
	Message *PostG2pMapperOnUnlinkDefaultBodyMessage `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on unlink default body
func (o *PostG2pMapperOnUnlinkDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink default body based on the context it is used
func (o *PostG2pMapperOnUnlinkDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkDefaultBodyMessage post g2p mapper on unlink default body message
//
// swagger:model PostG2pMapperOnUnlinkDefaultBodyMessage
type PostG2pMapperOnUnlinkDefaultBodyMessage struct {

	// ack status
	AckStatus models.Ack `json:"ack_status,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp models.Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this post g2p mapper on unlink default body message
func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAckStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) validateAckStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AckStatus) { // not required
		return nil
	}

	if err := o.AckStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := o.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink default body message based on the context it is used
func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAckStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) contextValidateAckStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := o.AckStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-unlink default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkDefaultBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkDefaultBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkForbiddenBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnUnlinkForbiddenBody
type PostG2pMapperOnUnlinkForbiddenBody struct {

	// error
	Error *PostG2pMapperOnUnlinkForbiddenBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on unlink forbidden body
func (o *PostG2pMapperOnUnlinkForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkForbiddenBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink forbidden body based on the context it is used
func (o *PostG2pMapperOnUnlinkForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkForbiddenBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkForbiddenBodyError post g2p mapper on unlink forbidden body error
//
// swagger:model PostG2pMapperOnUnlinkForbiddenBodyError
type PostG2pMapperOnUnlinkForbiddenBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on unlink forbidden body error
func (o *PostG2pMapperOnUnlinkForbiddenBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on unlink forbidden body error based on context it is used
func (o *PostG2pMapperOnUnlinkForbiddenBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkInternalServerErrorBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnUnlinkInternalServerErrorBody
type PostG2pMapperOnUnlinkInternalServerErrorBody struct {

	// error
	Error *PostG2pMapperOnUnlinkInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on unlink internal server error body
func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink internal server error body based on the context it is used
func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkInternalServerErrorBodyError post g2p mapper on unlink internal server error body error
//
// swagger:model PostG2pMapperOnUnlinkInternalServerErrorBodyError
type PostG2pMapperOnUnlinkInternalServerErrorBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on unlink internal server error body error
func (o *PostG2pMapperOnUnlinkInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on unlink internal server error body error based on context it is used
func (o *PostG2pMapperOnUnlinkInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkParamsBodyMessage post g2p mapper on unlink params body message
//
// swagger:model PostG2pMapperOnUnlinkParamsBodyMessage
type PostG2pMapperOnUnlinkParamsBodyMessage struct {

	// transaction id
	// Required: true
	TransactionID *models.TransactionID `json:"transaction_id"`

	// unlink response
	// Required: true
	UnlinkResponse []*models.UnlinkResponse `json:"unlink_response"`
}

// Validate validates this post g2p mapper on unlink params body message
func (o *PostG2pMapperOnUnlinkParamsBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnlinkResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkParamsBodyMessage) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if o.TransactionID != nil {
		if err := o.TransactionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkParamsBodyMessage) validateUnlinkResponse(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"unlink_response", "body", o.UnlinkResponse); err != nil {
		return err
	}

	for i := 0; i < len(o.UnlinkResponse); i++ {
		if swag.IsZero(o.UnlinkResponse[i]) { // not required
			continue
		}

		if o.UnlinkResponse[i] != nil {
			if err := o.UnlinkResponse[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "unlink_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "unlink_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink params body message based on the context it is used
func (o *PostG2pMapperOnUnlinkParamsBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUnlinkResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkParamsBodyMessage) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionID != nil {
		if err := o.TransactionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnUnlinkParamsBodyMessage) contextValidateUnlinkResponse(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UnlinkResponse); i++ {

		if o.UnlinkResponse[i] != nil {
			if err := o.UnlinkResponse[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "unlink_response" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "unlink_response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkParamsBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkParamsBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkParamsBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkUnauthorizedBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnUnlinkUnauthorizedBody
type PostG2pMapperOnUnlinkUnauthorizedBody struct {

	// error
	Error *PostG2pMapperOnUnlinkUnauthorizedBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on unlink unauthorized body
func (o *PostG2pMapperOnUnlinkUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on unlink unauthorized body based on the context it is used
func (o *PostG2pMapperOnUnlinkUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnUnlinkUnauthorizedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnUnlinkUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnUnlinkUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnUnlinkUnauthorizedBodyError post g2p mapper on unlink unauthorized body error
//
// swagger:model PostG2pMapperOnUnlinkUnauthorizedBodyError
type PostG2pMapperOnUnlinkUnauthorizedBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on unlink unauthorized body error
func (o *PostG2pMapperOnUnlinkUnauthorizedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on unlink unauthorized body error based on context it is used
func (o *PostG2pMapperOnUnlinkUnauthorizedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkUnauthorizedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnUnlinkUnauthorizedBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnUnlinkUnauthorizedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
