// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sunbirdrc/callback-service/swagger_gen/models"
)

// PostG2pMapperOnTxnstatusHandlerFunc turns a function with the right signature into a post g2p mapper on txnstatus handler
type PostG2pMapperOnTxnstatusHandlerFunc func(PostG2pMapperOnTxnstatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostG2pMapperOnTxnstatusHandlerFunc) Handle(params PostG2pMapperOnTxnstatusParams) middleware.Responder {
	return fn(params)
}

// PostG2pMapperOnTxnstatusHandler interface for that can handle valid post g2p mapper on txnstatus params
type PostG2pMapperOnTxnstatusHandler interface {
	Handle(PostG2pMapperOnTxnstatusParams) middleware.Responder
}

// NewPostG2pMapperOnTxnstatus creates a new http.Handler for the post g2p mapper on txnstatus operation
func NewPostG2pMapperOnTxnstatus(ctx *middleware.Context, handler PostG2pMapperOnTxnstatusHandler) *PostG2pMapperOnTxnstatus {
	return &PostG2pMapperOnTxnstatus{Context: ctx, Handler: handler}
}

/*
	PostG2pMapperOnTxnstatus swagger:route POST /mapper/txn/on-status postG2pMapperOnTxnstatus

FAMAP-ON-TXNSTS : /mapper/txn/on-status

Response to async status check of previous mapper transanctions using callback
*/
type PostG2pMapperOnTxnstatus struct {
	Context *middleware.Context
	Handler PostG2pMapperOnTxnstatusHandler
}

func (o *PostG2pMapperOnTxnstatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostG2pMapperOnTxnstatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostG2pMapperOnTxnstatusBody post g2p mapper on txnstatus body
//
// swagger:model PostG2pMapperOnTxnstatusBody
type PostG2pMapperOnTxnstatusBody struct {

	// header
	// Required: true
	Header struct {
		models.MsgCallbackHeader
	} `json:"header"`

	// message
	Message *PostG2pMapperOnTxnstatusParamsBodyMessage `json:"message,omitempty"`

	// signature
	Signature models.MsgSignature `json:"signature,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus body
func (o *PostG2pMapperOnTxnstatusBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) validateHeader(formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if err := o.Signature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus body based on the context it is used
func (o *PostG2pMapperOnTxnstatusBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signature.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusDefaultBody post g2p mapper on txnstatus default body
//
// swagger:model PostG2pMapperOnTxnstatusDefaultBody
type PostG2pMapperOnTxnstatusDefaultBody struct {

	// message
	Message *PostG2pMapperOnTxnstatusDefaultBodyMessage `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus default body
func (o *PostG2pMapperOnTxnstatusDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus default body based on the context it is used
func (o *PostG2pMapperOnTxnstatusDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusDefaultBodyMessage post g2p mapper on txnstatus default body message
//
// swagger:model PostG2pMapperOnTxnstatusDefaultBodyMessage
type PostG2pMapperOnTxnstatusDefaultBodyMessage struct {

	// ack status
	AckStatus models.Ack `json:"ack_status,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp models.Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus default body message
func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAckStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) validateAckStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AckStatus) { // not required
		return nil
	}

	if err := o.AckStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := o.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus default body message based on the context it is used
func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAckStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) contextValidateAckStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := o.AckStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_on-txnstatus default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusDefaultBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusDefaultBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusForbiddenBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnTxnstatusForbiddenBody
type PostG2pMapperOnTxnstatusForbiddenBody struct {

	// error
	Error *PostG2pMapperOnTxnstatusForbiddenBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus forbidden body
func (o *PostG2pMapperOnTxnstatusForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusForbiddenBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus forbidden body based on the context it is used
func (o *PostG2pMapperOnTxnstatusForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusForbiddenBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusForbiddenBodyError post g2p mapper on txnstatus forbidden body error
//
// swagger:model PostG2pMapperOnTxnstatusForbiddenBodyError
type PostG2pMapperOnTxnstatusForbiddenBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus forbidden body error
func (o *PostG2pMapperOnTxnstatusForbiddenBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on txnstatus forbidden body error based on context it is used
func (o *PostG2pMapperOnTxnstatusForbiddenBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusInternalServerErrorBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnTxnstatusInternalServerErrorBody
type PostG2pMapperOnTxnstatusInternalServerErrorBody struct {

	// error
	Error *PostG2pMapperOnTxnstatusInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus internal server error body
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus internal server error body based on the context it is used
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusInternalServerErrorBodyError post g2p mapper on txnstatus internal server error body error
//
// swagger:model PostG2pMapperOnTxnstatusInternalServerErrorBodyError
type PostG2pMapperOnTxnstatusInternalServerErrorBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus internal server error body error
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on txnstatus internal server error body error based on context it is used
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusParamsBodyMessage post g2p mapper on txnstatus params body message
//
// swagger:model PostG2pMapperOnTxnstatusParamsBodyMessage
type PostG2pMapperOnTxnstatusParamsBodyMessage struct {

	// transaction id
	// Required: true
	TransactionID *models.TransactionID `json:"transaction_id"`

	// txnstatus response
	// Required: true
	TxnstatusResponse models.TxnStatusResponse `json:"txnstatus_response"`
}

// Validate validates this post g2p mapper on txnstatus params body message
func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTxnstatusResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if o.TransactionID != nil {
		if err := o.TransactionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) validateTxnstatusResponse(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"txnstatus_response", "body", o.TxnstatusResponse); err != nil {
		return err
	}

	if err := o.TxnstatusResponse.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "message" + "." + "txnstatus_response")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "message" + "." + "txnstatus_response")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus params body message based on the context it is used
func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTxnstatusResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionID != nil {
		if err := o.TransactionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) contextValidateTxnstatusResponse(ctx context.Context, formats strfmt.Registry) error {

	if err := o.TxnstatusResponse.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "message" + "." + "txnstatus_response")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "message" + "." + "txnstatus_response")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusParamsBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusParamsBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusUnauthorizedBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperOnTxnstatusUnauthorizedBody
type PostG2pMapperOnTxnstatusUnauthorizedBody struct {

	// error
	Error *PostG2pMapperOnTxnstatusUnauthorizedBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus unauthorized body
func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper on txnstatus unauthorized body based on the context it is used
func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperOnTxnstatusUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperOnTxnstatusUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperOnTxnstatusUnauthorizedBodyError post g2p mapper on txnstatus unauthorized body error
//
// swagger:model PostG2pMapperOnTxnstatusUnauthorizedBodyError
type PostG2pMapperOnTxnstatusUnauthorizedBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper on txnstatus unauthorized body error
func (o *PostG2pMapperOnTxnstatusUnauthorizedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper on txnstatus unauthorized body error based on context it is used
func (o *PostG2pMapperOnTxnstatusUnauthorizedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusUnauthorizedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperOnTxnstatusUnauthorizedBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperOnTxnstatusUnauthorizedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
