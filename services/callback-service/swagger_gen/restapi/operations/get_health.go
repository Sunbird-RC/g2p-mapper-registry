// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetHealthHandlerFunc turns a function with the right signature into a get health handler
type GetHealthHandlerFunc func(GetHealthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHealthHandlerFunc) Handle(params GetHealthParams) middleware.Responder {
	return fn(params)
}

// GetHealthHandler interface for that can handle valid get health params
type GetHealthHandler interface {
	Handle(GetHealthParams) middleware.Responder
}

// NewGetHealth creates a new http.Handler for the get health operation
func NewGetHealth(ctx *middleware.Context, handler GetHealthHandler) *GetHealth {
	return &GetHealth{Context: ctx, Handler: handler}
}

/*
	GetHealth swagger:route GET /health getHealth

GetHealth get health API
*/
type GetHealth struct {
	Context *middleware.Context
	Handler GetHealthHandler
}

func (o *GetHealth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHealthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetHealthOKBody get health o k body
//
// swagger:model GetHealthOKBody
type GetHealthOKBody struct {

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get health o k body
func (o *GetHealthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get health o k body based on context it is used
func (o *GetHealthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetHealthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHealthOKBody) UnmarshalBinary(b []byte) error {
	var res GetHealthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
