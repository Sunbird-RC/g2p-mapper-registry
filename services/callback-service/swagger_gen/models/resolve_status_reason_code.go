// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResolveStatusReasonCode FA Mapper Resolve status reason codes
//
// swagger:model ResolveStatusReasonCode
type ResolveStatusReasonCode string

func NewResolveStatusReasonCode(value ResolveStatusReasonCode) *ResolveStatusReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResolveStatusReasonCode.
func (m ResolveStatusReasonCode) Pointer() *ResolveStatusReasonCode {
	return &m
}

const (

	// ResolveStatusReasonCodeRjctDotReferenceIDDotInvalid captures enum value "rjct.reference_id.invalid"
	ResolveStatusReasonCodeRjctDotReferenceIDDotInvalid ResolveStatusReasonCode = "rjct.reference_id.invalid"

	// ResolveStatusReasonCodeRjctDotReferenceIDDotDuplicate captures enum value "rjct.reference_id.duplicate"
	ResolveStatusReasonCodeRjctDotReferenceIDDotDuplicate ResolveStatusReasonCode = "rjct.reference_id.duplicate"

	// ResolveStatusReasonCodeRjctDotTimestampDotInvalid captures enum value "rjct.timestamp.invalid"
	ResolveStatusReasonCodeRjctDotTimestampDotInvalid ResolveStatusReasonCode = "rjct.timestamp.invalid"

	// ResolveStatusReasonCodeRjctDotIDDotInvalid captures enum value "rjct.id.invalid"
	ResolveStatusReasonCodeRjctDotIDDotInvalid ResolveStatusReasonCode = "rjct.id.invalid"

	// ResolveStatusReasonCodeRjctDotFaDotInvalid captures enum value "rjct.fa.invalid"
	ResolveStatusReasonCodeRjctDotFaDotInvalid ResolveStatusReasonCode = "rjct.fa.invalid"

	// ResolveStatusReasonCodeRjctDotResolveTypeDotNotSupported captures enum value "rjct.resolve_type.not_supported"
	ResolveStatusReasonCodeRjctDotResolveTypeDotNotSupported ResolveStatusReasonCode = "rjct.resolve_type.not_supported"

	// ResolveStatusReasonCodeSuccDotFaDotActive captures enum value "succ.fa.active"
	ResolveStatusReasonCodeSuccDotFaDotActive ResolveStatusReasonCode = "succ.fa.active"

	// ResolveStatusReasonCodeSuccDotFaDotInactive captures enum value "succ.fa.inactive"
	ResolveStatusReasonCodeSuccDotFaDotInactive ResolveStatusReasonCode = "succ.fa.inactive"

	// ResolveStatusReasonCodeSuccDotFaDotNotFound captures enum value "succ.fa.not_found"
	ResolveStatusReasonCodeSuccDotFaDotNotFound ResolveStatusReasonCode = "succ.fa.not_found"

	// ResolveStatusReasonCodeSuccDotFaDotNotLinkedToID captures enum value "succ.fa.not_linked_to_id"
	ResolveStatusReasonCodeSuccDotFaDotNotLinkedToID ResolveStatusReasonCode = "succ.fa.not_linked_to_id"

	// ResolveStatusReasonCodeSuccDotIDDotActive captures enum value "succ.id.active"
	ResolveStatusReasonCodeSuccDotIDDotActive ResolveStatusReasonCode = "succ.id.active"

	// ResolveStatusReasonCodeSuccDotIDDotInactive captures enum value "succ.id.inactive"
	ResolveStatusReasonCodeSuccDotIDDotInactive ResolveStatusReasonCode = "succ.id.inactive"

	// ResolveStatusReasonCodeSuccDotIDDotNotFound captures enum value "succ.id.not_found"
	ResolveStatusReasonCodeSuccDotIDDotNotFound ResolveStatusReasonCode = "succ.id.not_found"
)

// for schema
var resolveStatusReasonCodeEnum []interface{}

func init() {
	var res []ResolveStatusReasonCode
	if err := json.Unmarshal([]byte(`["rjct.reference_id.invalid","rjct.reference_id.duplicate","rjct.timestamp.invalid","rjct.id.invalid","rjct.fa.invalid","rjct.resolve_type.not_supported","succ.fa.active","succ.fa.inactive","succ.fa.not_found","succ.fa.not_linked_to_id","succ.id.active","succ.id.inactive","succ.id.not_found"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resolveStatusReasonCodeEnum = append(resolveStatusReasonCodeEnum, v)
	}
}

func (m ResolveStatusReasonCode) validateResolveStatusReasonCodeEnum(path, location string, value ResolveStatusReasonCode) error {
	if err := validate.EnumCase(path, location, value, resolveStatusReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resolve status reason code
func (m ResolveStatusReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResolveStatusReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resolve status reason code based on context it is used
func (m ResolveStatusReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
