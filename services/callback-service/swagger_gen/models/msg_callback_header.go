// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgCallbackHeader Message header
//
// swagger:model MsgCallbackHeader
type MsgCallbackHeader struct {

	// G2P Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements.
	// Required: true
	// Enum: [on-link on-unlink on-status on-search on-resolve on-update]
	Action *string `json:"action"`

	// No of requests in complteed state. Complete includes success and error requests due to funcational errors
	// Example: 50
	CompletedCount int64 `json:"completed_count,omitempty"`

	// Is message encrypted?
	IsEncrypted *bool `json:"is_encrypted,omitempty"`

	// Unique message id to communicate between sender and receiver systems. Receiving system should echo the orignial message_id for correlations.
	// Example: 123456789020211216223812
	// Required: true
	MessageID *string `json:"message_id"`

	// Time of message generation in RFC3339 format
	// Example: 2022-12-04T18:02:35+00:00
	// Required: true
	// Format: date-time
	MessageTs *strfmt.DateTime `json:"message_ts"`

	// receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.
	// Example: registry.example.org
	ReceiverID string `json:"receiver_id,omitempty"`

	// receiver url to accept callbacks
	// Format: uri
	ReceiverURI strfmt.URI `json:"receiver_uri,omitempty"`

	// send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.
	// Example: pymts.example.org
	SenderID string `json:"sender_id,omitempty"`

	// sender url to accept callbacks
	// Format: uri
	SenderURI strfmt.URI `json:"sender_uri,omitempty"`

	// status
	// Required: true
	Status *RequestStatus `json:"status"`

	// status reason code
	StatusReasonCode MsgHeaderStatusReasonCode `json:"status_reason_code,omitempty"`

	// Status reascon code message, if any, Helps actionanble messaging for system/end users
	// Max Length: 999
	StatusReasonMessage string `json:"status_reason_message,omitempty"`

	// Total no of requests present in the message request
	// Example: 21800
	TotalCount int64 `json:"total_count,omitempty"`

	// Messaing protocol specification version being used
	// Example: 0.1.0
	Version string `json:"version,omitempty"`
}

// Validate validates this msg callback header
func (m *MsgCallbackHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReasonMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgCallbackHeaderTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on-link","on-unlink","on-status","on-search","on-resolve","on-update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgCallbackHeaderTypeActionPropEnum = append(msgCallbackHeaderTypeActionPropEnum, v)
	}
}

const (

	// MsgCallbackHeaderActionOnDashLink captures enum value "on-link"
	MsgCallbackHeaderActionOnDashLink string = "on-link"

	// MsgCallbackHeaderActionOnDashUnlink captures enum value "on-unlink"
	MsgCallbackHeaderActionOnDashUnlink string = "on-unlink"

	// MsgCallbackHeaderActionOnDashStatus captures enum value "on-status"
	MsgCallbackHeaderActionOnDashStatus string = "on-status"

	// MsgCallbackHeaderActionOnDashSearch captures enum value "on-search"
	MsgCallbackHeaderActionOnDashSearch string = "on-search"

	// MsgCallbackHeaderActionOnDashResolve captures enum value "on-resolve"
	MsgCallbackHeaderActionOnDashResolve string = "on-resolve"

	// MsgCallbackHeaderActionOnDashUpdate captures enum value "on-update"
	MsgCallbackHeaderActionOnDashUpdate string = "on-update"
)

// prop value enum
func (m *MsgCallbackHeader) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgCallbackHeaderTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgCallbackHeader) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("message_id", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateMessageTs(formats strfmt.Registry) error {

	if err := validate.Required("message_ts", "body", m.MessageTs); err != nil {
		return err
	}

	if err := validate.FormatOf("message_ts", "body", "date-time", m.MessageTs.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateReceiverURI(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiverURI) { // not required
		return nil
	}

	if err := validate.FormatOf("receiver_uri", "body", "uri", m.ReceiverURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateSenderURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SenderURI) { // not required
		return nil
	}

	if err := validate.FormatOf("sender_uri", "body", "uri", m.SenderURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *MsgCallbackHeader) validateStatusReasonCode(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusReasonCode) { // not required
		return nil
	}

	if err := m.StatusReasonCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status_reason_code")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status_reason_code")
		}
		return err
	}

	return nil
}

func (m *MsgCallbackHeader) validateStatusReasonMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusReasonMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("status_reason_message", "body", m.StatusReasonMessage, 999); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this msg callback header based on the context it is used
func (m *MsgCallbackHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusReasonCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgCallbackHeader) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *MsgCallbackHeader) contextValidateStatusReasonCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StatusReasonCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status_reason_code")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status_reason_code")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgCallbackHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgCallbackHeader) UnmarshalBinary(b []byte) error {
	var res MsgCallbackHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
