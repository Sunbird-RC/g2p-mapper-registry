// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountInfo Beneficiary store of value account info
//
// swagger:model AccountInfo
type AccountInfo struct {

	// account info
	// Required: true
	AccountInfo *AccountInfoAccountInfo `json:"account_info"`

	// contact info
	// Required: true
	ContactInfo *AccountInfoContactInfo `json:"contact_info"`

	// name
	// Required: true
	Name *LinkRequestName `json:"name"`
}

// Validate validates this account info
func (m *AccountInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInfo) validateAccountInfo(formats strfmt.Registry) error {

	if err := validate.Required("account_info", "body", m.AccountInfo); err != nil {
		return err
	}

	if m.AccountInfo != nil {
		if err := m.AccountInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account_info")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfo) validateContactInfo(formats strfmt.Registry) error {

	if err := validate.Required("contact_info", "body", m.ContactInfo); err != nil {
		return err
	}

	if m.ContactInfo != nil {
		if err := m.ContactInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact_info")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this account info based on the context it is used
func (m *AccountInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInfo) contextValidateAccountInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountInfo != nil {
		if err := m.AccountInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account_info")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfo) contextValidateContactInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInfo != nil {
		if err := m.ContactInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact_info")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfo) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountInfo) UnmarshalBinary(b []byte) error {
	var res AccountInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountInfoAccountInfo account info account info
//
// swagger:model AccountInfoAccountInfo
type AccountInfoAccountInfo struct {

	// Additional info, if any
	// Max Length: 999
	AdditionalInfo string `json:"additional_info,omitempty"`

	// store of value account number
	// Example: 12345
	// Required: true
	Number *string `json:"number"`

	// provider info
	// Required: true
	ProviderInfo *AccountProviderInfo `json:"provider_info"`

	// store of  value account type. e.g savings, checking, pre-paid, voucher, mobile-wallet, etc.,
	// Example: savings
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this account info account info
func (m *AccountInfoAccountInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInfoAccountInfo) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if err := validate.MaxLength("account_info"+"."+"additional_info", "body", m.AdditionalInfo, 999); err != nil {
		return err
	}

	return nil
}

func (m *AccountInfoAccountInfo) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_info"+"."+"number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *AccountInfoAccountInfo) validateProviderInfo(formats strfmt.Registry) error {

	if err := validate.Required("account_info"+"."+"provider_info", "body", m.ProviderInfo); err != nil {
		return err
	}

	if m.ProviderInfo != nil {
		if err := m.ProviderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_info" + "." + "provider_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account_info" + "." + "provider_info")
			}
			return err
		}
	}

	return nil
}

func (m *AccountInfoAccountInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("account_info"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account info account info based on the context it is used
func (m *AccountInfoAccountInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviderInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountInfoAccountInfo) contextValidateProviderInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ProviderInfo != nil {
		if err := m.ProviderInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_info" + "." + "provider_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account_info" + "." + "provider_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountInfoAccountInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountInfoAccountInfo) UnmarshalBinary(b []byte) error {
	var res AccountInfoAccountInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AccountInfoContactInfo Person contact details
//
// swagger:model AccountInfoContactInfo
type AccountInfoContactInfo struct {

	// alt email id
	AltEmailID string `json:"alt_email_id,omitempty"`

	// alt mobile number
	AltMobileNumber string `json:"alt_mobile_number,omitempty"`

	// email id
	EmailID string `json:"email_id,omitempty"`

	// mobile number
	MobileNumber string `json:"mobile_number,omitempty"`

	// landline
	Phone string `json:"phone,omitempty"`
}

// Validate validates this account info contact info
func (m *AccountInfoContactInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this account info contact info based on context it is used
func (m *AccountInfoContactInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountInfoContactInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountInfoContactInfo) UnmarshalBinary(b []byte) error {
	var res AccountInfoContactInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
