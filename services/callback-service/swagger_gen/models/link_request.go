// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkRequest ID to Store of value account linking request
//
// swagger:model LinkRequest
type LinkRequest struct {

	// additional info
	AdditionalInfo *KeyValueInfo `json:"additional_info,omitempty"`

	// fa
	// Required: true
	Fa *FinancialAddress `json:"fa"`

	// id
	// Required: true
	ID *PersonID `json:"id"`

	// locale
	Locale LanguageCode `json:"locale,omitempty"`

	// mobile number
	MobileNumber string `json:"mobile_number,omitempty"`

	// name
	Name LinkRequestName `json:"name,omitempty"`

	// reference id
	// Required: true
	ReferenceID *ReferenceID `json:"reference_id"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *Timestamp `json:"timestamp"`
}

// Validate validates this link request
func (m *LinkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkRequest) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additional_info")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) validateFa(formats strfmt.Registry) error {

	if err := validate.Required("fa", "body", m.Fa); err != nil {
		return err
	}

	if err := validate.Required("fa", "body", m.Fa); err != nil {
		return err
	}

	if m.Fa != nil {
		if err := m.Fa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fa")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if err := m.Locale.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *LinkRequest) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *LinkRequest) validateReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if m.ReferenceID != nil {
		if err := m.ReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if m.Timestamp != nil {
		if err := m.Timestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this link request based on the context it is used
func (m *LinkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkRequest) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additional_info")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) contextValidateFa(ctx context.Context, formats strfmt.Registry) error {

	if m.Fa != nil {
		if err := m.Fa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fa")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if m.ID != nil {
		if err := m.ID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Locale.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *LinkRequest) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Name.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *LinkRequest) contextValidateReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceID != nil {
		if err := m.ReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

func (m *LinkRequest) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if m.Timestamp != nil {
		if err := m.Timestamp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkRequest) UnmarshalBinary(b []byte) error {
	var res LinkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
