// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchRequest Request to search mapper requests
//
// swagger:model SearchRequest
type SearchRequest struct {

	// attribute type
	// Required: true
	// Enum: [fa id]
	AttributeType *string `json:"attribute_type"`

	// attribute value
	// Required: true
	AttributeValue interface{} `json:"attribute_value"`

	// locale
	Locale LanguageCode `json:"locale,omitempty"`

	// reference id
	// Required: true
	ReferenceID *ReferenceID `json:"reference_id"`

	// request type
	// Required: true
	// Enum: [link unlink update resolve]
	RequestType *string `json:"request_type"`
}

// Validate validates this search request
func (m *SearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchRequestTypeAttributeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fa","id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchRequestTypeAttributeTypePropEnum = append(searchRequestTypeAttributeTypePropEnum, v)
	}
}

const (

	// SearchRequestAttributeTypeFa captures enum value "fa"
	SearchRequestAttributeTypeFa string = "fa"

	// SearchRequestAttributeTypeID captures enum value "id"
	SearchRequestAttributeTypeID string = "id"
)

// prop value enum
func (m *SearchRequest) validateAttributeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchRequestTypeAttributeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchRequest) validateAttributeType(formats strfmt.Registry) error {

	if err := validate.Required("attribute_type", "body", m.AttributeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAttributeTypeEnum("attribute_type", "body", *m.AttributeType); err != nil {
		return err
	}

	return nil
}

func (m *SearchRequest) validateAttributeValue(formats strfmt.Registry) error {

	if m.AttributeValue == nil {
		return errors.Required("attribute_value", "body", nil)
	}

	return nil
}

func (m *SearchRequest) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if err := m.Locale.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *SearchRequest) validateReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if m.ReferenceID != nil {
		if err := m.ReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

var searchRequestTypeRequestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["link","unlink","update","resolve"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchRequestTypeRequestTypePropEnum = append(searchRequestTypeRequestTypePropEnum, v)
	}
}

const (

	// SearchRequestRequestTypeLink captures enum value "link"
	SearchRequestRequestTypeLink string = "link"

	// SearchRequestRequestTypeUnlink captures enum value "unlink"
	SearchRequestRequestTypeUnlink string = "unlink"

	// SearchRequestRequestTypeUpdate captures enum value "update"
	SearchRequestRequestTypeUpdate string = "update"

	// SearchRequestRequestTypeResolve captures enum value "resolve"
	SearchRequestRequestTypeResolve string = "resolve"
)

// prop value enum
func (m *SearchRequest) validateRequestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchRequestTypeRequestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchRequest) validateRequestType(formats strfmt.Registry) error {

	if err := validate.Required("request_type", "body", m.RequestType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequestTypeEnum("request_type", "body", *m.RequestType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this search request based on the context it is used
func (m *SearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchRequest) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Locale.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *SearchRequest) contextValidateReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceID != nil {
		if err := m.ReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchRequest) UnmarshalBinary(b []byte) error {
	var res SearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
