// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SearchStatusReasonCode Financial mapper search reason codes
//
// swagger:model SearchStatusReasonCode
type SearchStatusReasonCode string

func NewSearchStatusReasonCode(value SearchStatusReasonCode) *SearchStatusReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SearchStatusReasonCode.
func (m SearchStatusReasonCode) Pointer() *SearchStatusReasonCode {
	return &m
}

const (

	// SearchStatusReasonCodeRjctDotReferenceIDDotDuplicate captures enum value "rjct.reference_id.duplicate"
	SearchStatusReasonCodeRjctDotReferenceIDDotDuplicate SearchStatusReasonCode = "rjct.reference_id.duplicate"

	// SearchStatusReasonCodeRjctDotTimestampDotInvalid captures enum value "rjct.timestamp.invalid"
	SearchStatusReasonCodeRjctDotTimestampDotInvalid SearchStatusReasonCode = "rjct.timestamp.invalid"

	// SearchStatusReasonCodeRjctDotRequestTypeDotInvalid captures enum value "rjct.request_type.invalid"
	SearchStatusReasonCodeRjctDotRequestTypeDotInvalid SearchStatusReasonCode = "rjct.request_type.invalid"

	// SearchStatusReasonCodeRjctDotAttributeTypeDotInvalid captures enum value "rjct.attribute_type.invalid"
	SearchStatusReasonCodeRjctDotAttributeTypeDotInvalid SearchStatusReasonCode = "rjct.attribute_type.invalid"

	// SearchStatusReasonCodeRjctDotSrchTransactionIDDotInvalid captures enum value "rjct.srch_transaction_id.invalid"
	SearchStatusReasonCodeRjctDotSrchTransactionIDDotInvalid SearchStatusReasonCode = "rjct.srch_transaction_id.invalid"

	// SearchStatusReasonCodeRjctDotSrchTransactionIDDotNotFound captures enum value "rjct.srch_transaction_id.not_found"
	SearchStatusReasonCodeRjctDotSrchTransactionIDDotNotFound SearchStatusReasonCode = "rjct.srch_transaction_id.not_found"

	// SearchStatusReasonCodeRjctSrchReferenceIDInvalid captures enum value "rjct_srch_reference_id_invalid"
	SearchStatusReasonCodeRjctSrchReferenceIDInvalid SearchStatusReasonCode = "rjct_srch_reference_id_invalid"

	// SearchStatusReasonCodeRjctSrchReferenceIDNotFound captures enum value "rjct_srch_reference_id_not_found"
	SearchStatusReasonCodeRjctSrchReferenceIDNotFound SearchStatusReasonCode = "rjct_srch_reference_id_not_found"

	// SearchStatusReasonCodeRjctDotReferenceIDDotInvalid captures enum value "rjct.reference_id.invalid"
	SearchStatusReasonCodeRjctDotReferenceIDDotInvalid SearchStatusReasonCode = "rjct.reference_id.invalid"

	// SearchStatusReasonCodeRjctDotSrchPayerFaDotInvalid captures enum value "rjct.srch_payer_fa.invalid"
	SearchStatusReasonCodeRjctDotSrchPayerFaDotInvalid SearchStatusReasonCode = "rjct.srch_payer_fa.invalid"

	// SearchStatusReasonCodeRjctDotSrchPayeeFaDotInvalid captures enum value "rjct.srch_payee_fa.invalid"
	SearchStatusReasonCodeRjctDotSrchPayeeFaDotInvalid SearchStatusReasonCode = "rjct.srch_payee_fa.invalid"

	// SearchStatusReasonCodeRjctDotShareAttributesDotInvalid captures enum value "rjct.share_attributes.invalid"
	SearchStatusReasonCodeRjctDotShareAttributesDotInvalid SearchStatusReasonCode = "rjct.share_attributes.invalid"

	// SearchStatusReasonCodeRjctDotSrchDotTooManyRecordFound captures enum value "rjct.srch.too_many_record_found"
	SearchStatusReasonCodeRjctDotSrchDotTooManyRecordFound SearchStatusReasonCode = "rjct.srch.too_many_record_found"
)

// for schema
var searchStatusReasonCodeEnum []interface{}

func init() {
	var res []SearchStatusReasonCode
	if err := json.Unmarshal([]byte(`["rjct.reference_id.duplicate","rjct.timestamp.invalid","rjct.request_type.invalid","rjct.attribute_type.invalid","rjct.srch_transaction_id.invalid","rjct.srch_transaction_id.not_found","rjct_srch_reference_id_invalid","rjct_srch_reference_id_not_found","rjct.reference_id.invalid","rjct.srch_payer_fa.invalid","rjct.srch_payee_fa.invalid","rjct.share_attributes.invalid","rjct.srch.too_many_record_found"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchStatusReasonCodeEnum = append(searchStatusReasonCodeEnum, v)
	}
}

func (m SearchStatusReasonCode) validateSearchStatusReasonCodeEnum(path, location string, value SearchStatusReasonCode) error {
	if err := validate.EnumCase(path, location, value, searchStatusReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this search status reason code
func (m SearchStatusReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSearchStatusReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this search status reason code based on context it is used
func (m SearchStatusReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
