// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LinkStatusReasonCode FA Mapper Link status reason codes
//
// swagger:model LinkStatusReasonCode
type LinkStatusReasonCode string

func NewLinkStatusReasonCode(value LinkStatusReasonCode) *LinkStatusReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LinkStatusReasonCode.
func (m LinkStatusReasonCode) Pointer() *LinkStatusReasonCode {
	return &m
}

const (

	// LinkStatusReasonCodeRjctDotReferenceIDDotInvalid captures enum value "rjct.reference_id.invalid"
	LinkStatusReasonCodeRjctDotReferenceIDDotInvalid LinkStatusReasonCode = "rjct.reference_id.invalid"

	// LinkStatusReasonCodeRjctDotReferenceIDDotDuplicate captures enum value "rjct.reference_id.duplicate"
	LinkStatusReasonCodeRjctDotReferenceIDDotDuplicate LinkStatusReasonCode = "rjct.reference_id.duplicate"

	// LinkStatusReasonCodeRjctDotTimestampDotInvalid captures enum value "rjct.timestamp.invalid"
	LinkStatusReasonCodeRjctDotTimestampDotInvalid LinkStatusReasonCode = "rjct.timestamp.invalid"

	// LinkStatusReasonCodeRjctDotIDDotInvalid captures enum value "rjct.id.invalid"
	LinkStatusReasonCodeRjctDotIDDotInvalid LinkStatusReasonCode = "rjct.id.invalid"

	// LinkStatusReasonCodeRjctDotFaDotInvalid captures enum value "rjct.fa.invalid"
	LinkStatusReasonCodeRjctDotFaDotInvalid LinkStatusReasonCode = "rjct.fa.invalid"

	// LinkStatusReasonCodeRjctDotNameDotInvalid captures enum value "rjct.name.invalid"
	LinkStatusReasonCodeRjctDotNameDotInvalid LinkStatusReasonCode = "rjct.name.invalid"

	// LinkStatusReasonCodeRjctDotMobileNumberDotInvalid captures enum value "rjct.mobile_number.invalid"
	LinkStatusReasonCodeRjctDotMobileNumberDotInvalid LinkStatusReasonCode = "rjct.mobile_number.invalid"

	// LinkStatusReasonCodeRjctDotUnknownDotRetry captures enum value "rjct.unknown.retry"
	LinkStatusReasonCodeRjctDotUnknownDotRetry LinkStatusReasonCode = "rjct.unknown.retry"

	// LinkStatusReasonCodeRjctDotOtherDotError captures enum value "rjct.other.error"
	LinkStatusReasonCodeRjctDotOtherDotError LinkStatusReasonCode = "rjct.other.error"
)

// for schema
var linkStatusReasonCodeEnum []interface{}

func init() {
	var res []LinkStatusReasonCode
	if err := json.Unmarshal([]byte(`["rjct.reference_id.invalid","rjct.reference_id.duplicate","rjct.timestamp.invalid","rjct.id.invalid","rjct.fa.invalid","rjct.name.invalid","rjct.mobile_number.invalid","rjct.unknown.retry","rjct.other.error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkStatusReasonCodeEnum = append(linkStatusReasonCodeEnum, v)
	}
}

func (m LinkStatusReasonCode) validateLinkStatusReasonCodeEnum(path, location string, value LinkStatusReasonCode) error {
	if err := validate.EnumCase(path, location, value, linkStatusReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this link status reason code
func (m LinkStatusReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLinkStatusReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this link status reason code based on context it is used
func (m LinkStatusReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
