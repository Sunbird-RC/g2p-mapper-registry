// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgHeader Message header
//
// swagger:model MsgHeader
type MsgHeader struct {

	// G2P Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps identity payload type in message property.
	// Required: true
	Action *string `json:"action"`

	// Is message encrypted?
	IsEncrypted *bool `json:"is_encrypted,omitempty"`

	// Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,
	// Example: 123456789020211216223812
	// Required: true
	MessageID *string `json:"message_id"`

	// Time of message generation in RFC3339 format
	// Example: 2022-12-04T18:01:07+00:00
	// Required: true
	// Format: date-time
	MessageTs *strfmt.DateTime `json:"message_ts"`

	// receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.
	// Example: pymts.example.org
	ReceiverID string `json:"receiver_id,omitempty"`

	// send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.
	// Example: registry.example.org
	SenderID string `json:"sender_id,omitempty"`

	// sender url to accept callbacks
	// Example: https://registry.sender.org/g2p/callback/on-disburse
	// Format: uri
	SenderURI strfmt.URI `json:"sender_uri,omitempty"`

	// Total no of requests present in the message request
	// Example: 21800
	TotalCount int64 `json:"total_count,omitempty"`

	// Messaing protocol specification version being used
	// Example: 0.1.0
	Version string `json:"version,omitempty"`
}

// Validate validates this msg header
func (m *MsgHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageTs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgHeader) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *MsgHeader) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("message_id", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *MsgHeader) validateMessageTs(formats strfmt.Registry) error {

	if err := validate.Required("message_ts", "body", m.MessageTs); err != nil {
		return err
	}

	if err := validate.FormatOf("message_ts", "body", "date-time", m.MessageTs.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MsgHeader) validateSenderURI(formats strfmt.Registry) error {
	if swag.IsZero(m.SenderURI) { // not required
		return nil
	}

	if err := validate.FormatOf("sender_uri", "body", "uri", m.SenderURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this msg header based on context it is used
func (m *MsgHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MsgHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgHeader) UnmarshalBinary(b []byte) error {
	var res MsgHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
