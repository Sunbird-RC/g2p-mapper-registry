// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UnlinkStatusReasonCode FA Mapper Unlink status reason codes
//
// swagger:model UnlinkStatusReasonCode
type UnlinkStatusReasonCode string

func NewUnlinkStatusReasonCode(value UnlinkStatusReasonCode) *UnlinkStatusReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UnlinkStatusReasonCode.
func (m UnlinkStatusReasonCode) Pointer() *UnlinkStatusReasonCode {
	return &m
}

const (

	// UnlinkStatusReasonCodeRjctDotReferenceIDDotInvalid captures enum value "rjct.reference_id.invalid"
	UnlinkStatusReasonCodeRjctDotReferenceIDDotInvalid UnlinkStatusReasonCode = "rjct.reference_id.invalid"

	// UnlinkStatusReasonCodeRjctDotReferenceIDDotDuplicate captures enum value "rjct.reference_id.duplicate"
	UnlinkStatusReasonCodeRjctDotReferenceIDDotDuplicate UnlinkStatusReasonCode = "rjct.reference_id.duplicate"

	// UnlinkStatusReasonCodeRjctDotTimestampDotInvalid captures enum value "rjct.timestamp.invalid"
	UnlinkStatusReasonCodeRjctDotTimestampDotInvalid UnlinkStatusReasonCode = "rjct.timestamp.invalid"

	// UnlinkStatusReasonCodeRjctDotBeneficiaryNameDotInvalid captures enum value "rjct.beneficiary_name.invalid"
	UnlinkStatusReasonCodeRjctDotBeneficiaryNameDotInvalid UnlinkStatusReasonCode = "rjct.beneficiary_name.invalid"
)

// for schema
var unlinkStatusReasonCodeEnum []interface{}

func init() {
	var res []UnlinkStatusReasonCode
	if err := json.Unmarshal([]byte(`["rjct.reference_id.invalid","rjct.reference_id.duplicate","rjct.timestamp.invalid","rjct.beneficiary_name.invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unlinkStatusReasonCodeEnum = append(unlinkStatusReasonCodeEnum, v)
	}
}

func (m UnlinkStatusReasonCode) validateUnlinkStatusReasonCodeEnum(path, location string, value UnlinkStatusReasonCode) error {
	if err := validate.EnumCase(path, location, value, unlinkStatusReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unlink status reason code
func (m UnlinkStatusReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnlinkStatusReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unlink status reason code based on context it is used
func (m UnlinkStatusReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
