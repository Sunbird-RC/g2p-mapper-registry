// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResolveRequest 1. If id is null then only verify and resolve fa is linked to store of value account. Verification is done by entity issuing fa.
// 2. If id is not null then verify and resolve fa is linked store of value account. Additionally verify fa and id are issued to the same individual. If both conditions pass then resolve status can be set to yes.
//
// swagger:model ResolveRequest
type ResolveRequest struct {

	// additional info
	AdditionalInfo *KeyValueInfo `json:"additional_info,omitempty"`

	// fa
	// Required: true
	Fa *FinancialAddress `json:"fa"`

	// id
	ID PersonID `json:"id,omitempty"`

	// locale
	Locale LanguageCode `json:"locale,omitempty"`

	// name
	Name LinkRequestName `json:"name,omitempty"`

	// reference id
	// Required: true
	ReferenceID *ReferenceID `json:"reference_id"`

	// Resolve scope to return only yes_no or account provider or id details. Additional authorization based on caller to be enforced by the implementing system to return any sensitive data.
	// Enum: [yes_no details]
	Scope *string `json:"scope,omitempty"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *Timestamp `json:"timestamp"`
}

// Validate validates this resolve request
func (m *ResolveRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResolveRequest) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additional_info")
			}
			return err
		}
	}

	return nil
}

func (m *ResolveRequest) validateFa(formats strfmt.Registry) error {

	if err := validate.Required("fa", "body", m.Fa); err != nil {
		return err
	}

	if err := validate.Required("fa", "body", m.Fa); err != nil {
		return err
	}

	if m.Fa != nil {
		if err := m.Fa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fa")
			}
			return err
		}
	}

	return nil
}

func (m *ResolveRequest) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if err := m.Locale.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) validateReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if err := validate.Required("reference_id", "body", m.ReferenceID); err != nil {
		return err
	}

	if m.ReferenceID != nil {
		if err := m.ReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

var resolveRequestTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes_no","details"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resolveRequestTypeScopePropEnum = append(resolveRequestTypeScopePropEnum, v)
	}
}

const (

	// ResolveRequestScopeYesNo captures enum value "yes_no"
	ResolveRequestScopeYesNo string = "yes_no"

	// ResolveRequestScopeDetails captures enum value "details"
	ResolveRequestScopeDetails string = "details"
)

// prop value enum
func (m *ResolveRequest) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resolveRequestTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResolveRequest) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *ResolveRequest) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if m.Timestamp != nil {
		if err := m.Timestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resolve request based on the context it is used
func (m *ResolveRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResolveRequest) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("additional_info")
			}
			return err
		}
	}

	return nil
}

func (m *ResolveRequest) contextValidateFa(ctx context.Context, formats strfmt.Registry) error {

	if m.Fa != nil {
		if err := m.Fa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fa")
			}
			return err
		}
	}

	return nil
}

func (m *ResolveRequest) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Locale.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locale")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Name.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *ResolveRequest) contextValidateReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceID != nil {
		if err := m.ReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_id")
			}
			return err
		}
	}

	return nil
}

func (m *ResolveRequest) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if m.Timestamp != nil {
		if err := m.Timestamp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResolveRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResolveRequest) UnmarshalBinary(b []byte) error {
	var res ResolveRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
