// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UpdateStatusReasonCode FA Mapper Update status reason codes
//
// swagger:model UpdateStatusReasonCode
type UpdateStatusReasonCode string

func NewUpdateStatusReasonCode(value UpdateStatusReasonCode) *UpdateStatusReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UpdateStatusReasonCode.
func (m UpdateStatusReasonCode) Pointer() *UpdateStatusReasonCode {
	return &m
}

const (

	// UpdateStatusReasonCodeRjctDotReferenceIDDotInvalid captures enum value "rjct.reference_id.invalid"
	UpdateStatusReasonCodeRjctDotReferenceIDDotInvalid UpdateStatusReasonCode = "rjct.reference_id.invalid"

	// UpdateStatusReasonCodeRjctDotReferenceIDDotDuplicate captures enum value "rjct.reference_id.duplicate"
	UpdateStatusReasonCodeRjctDotReferenceIDDotDuplicate UpdateStatusReasonCode = "rjct.reference_id.duplicate"

	// UpdateStatusReasonCodeRjctDotTimestampDotInvalid captures enum value "rjct.timestamp.invalid"
	UpdateStatusReasonCodeRjctDotTimestampDotInvalid UpdateStatusReasonCode = "rjct.timestamp.invalid"

	// UpdateStatusReasonCodeRjctDotBeneficiaryNameDotInvalid captures enum value "rjct.beneficiary_name.invalid"
	UpdateStatusReasonCodeRjctDotBeneficiaryNameDotInvalid UpdateStatusReasonCode = "rjct.beneficiary_name.invalid"
)

// for schema
var updateStatusReasonCodeEnum []interface{}

func init() {
	var res []UpdateStatusReasonCode
	if err := json.Unmarshal([]byte(`["rjct.reference_id.invalid","rjct.reference_id.duplicate","rjct.timestamp.invalid","rjct.beneficiary_name.invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStatusReasonCodeEnum = append(updateStatusReasonCodeEnum, v)
	}
}

func (m UpdateStatusReasonCode) validateUpdateStatusReasonCodeEnum(path, location string, value UpdateStatusReasonCode) error {
	if err := validate.EnumCase(path, location, value, updateStatusReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this update status reason code
func (m UpdateStatusReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUpdateStatusReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update status reason code based on context it is used
func (m UpdateStatusReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
