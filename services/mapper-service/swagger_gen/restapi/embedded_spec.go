// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "ID Mapper",
    "version": "0.1.0"
  },
  "basePath": "/v0.1.0",
  "paths": {
    "/mapper/link": {
      "post": {
        "description": "Linking ID to Financial Address in the mapper registry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "post_g2p_mapper_link",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "link_request"
                  ],
                  "properties": {
                    "link_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LinkRequest"
                      }
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/resolve": {
      "post": {
        "description": "Resolve fa / beneficiary id to a store of value",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-RSLV : /mapper/resolve",
        "operationId": "post_g2p_mapper_resolve",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "resolve_request"
                  ],
                  "properties": {
                    "resolve_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ResolveRequest"
                      }
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/search": {
      "post": {
        "description": "Search mapper by searchable attributes",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-SRCH : /mapper/search",
        "operationId": "post_g2p_famap_search",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "search_request"
                  ],
                  "properties": {
                    "search_request": {
                      "$ref": "#/definitions/SearchRequest"
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/txn/status": {
      "post": {
        "description": "Perform async status check of previous mapper transanctions using searchable attributes",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-TXNSTS : /mapper/txn/status",
        "operationId": "post_g2p_mapper_txnstatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "txnstatus_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "txnstatus_request": {
                      "$ref": "#/definitions/TxnStatusRequest"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/unlink": {
      "post": {
        "description": "Unlinking id from mapper registry",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-ULNK : /mapper/unlink",
        "operationId": "post_g2p_mapper_unlink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "unlink_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "unlink_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/UnlinkRequest"
                      }
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/update": {
      "post": {
        "description": "Updating fa details against an id in mapper registry",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-UPDT\t: /mapper/update",
        "operationId": "put_g2p_mapper_update",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "update_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "update_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/UpdateRequest"
                      }
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountInfo": {
      "description": "Beneficiary store of value account info",
      "type": "object",
      "required": [
        "name",
        "contact_info",
        "account_info"
      ],
      "properties": {
        "account_info": {
          "type": "object",
          "required": [
            "type",
            "number",
            "provider_info"
          ],
          "properties": {
            "additional_info": {
              "description": "Additional info, if any",
              "type": "string",
              "maxLength": 999
            },
            "number": {
              "description": "store of value account number",
              "type": "string",
              "example": "12345"
            },
            "provider_info": {
              "$ref": "#/definitions/AccountProviderInfo"
            },
            "type": {
              "description": "store of  value account type. e.g savings, checking, pre-paid, voucher, mobile-wallet, etc.,",
              "type": "string",
              "example": "savings"
            }
          }
        },
        "contact_info": {
          "description": "Person contact details",
          "properties": {
            "alt_email_id": {
              "type": "string"
            },
            "alt_mobile_number": {
              "type": "string"
            },
            "email_id": {
              "type": "string"
            },
            "mobile_number": {
              "type": "string"
            },
            "phone": {
              "description": "landline",
              "type": "string"
            }
          }
        },
        "name": {
          "$ref": "#/definitions/LinkRequest/properties/name"
        }
      }
    },
    "AccountProviderInfo": {
      "description": "Store of value account provider info",
      "type": "object",
      "required": [
        "name",
        "code"
      ],
      "properties": {
        "additional_info": {
          "description": "Additional info, if any",
          "type": "string",
          "maxLength": 999
        },
        "code": {
          "description": "code to identify the entity like bank, prepaid card/voucher issuing system, etc.,",
          "type": "string",
          "example": "GTBIRWRKXXX"
        },
        "name": {
          "description": "entity name like bank name, prepaid card/voucher issuing system, etc.,",
          "type": "string",
          "example": "GT Bank Rawanda"
        },
        "subcode": {
          "description": "sub code like entity's branch code, etc.,",
          "type": "string"
        }
      }
    },
    "Ack": {
      "description": "1. ACK: If the request is valid (for basic checks) and async callback (i.e webhook) will be invoked by reciever back to the sender.\n2. NACK: If the request is valid (for basic checks) and there is no futher updates from reciever back to the sender.\n3. ERR: If the reuqest is invalid and reciver can't process the request. error object holds error code, message.\n",
      "type": "string",
      "enum": [
        "ACK",
        "NACK",
        "ERR"
      ]
    },
    "Error": {
      "description": "Describes an error object that is returned to standard post call request. \u003cbr\u003e\n1. This object shall be sent when any request received by a participant is not parsable or message integrity check fails. \u003cbr\u003e\n2. This object may be used across all transport protocols to acknowledge the receipt of a message i.e HTTPS, FTP, Messaging etc., \u003cbr\u003e\"\n",
      "type": "object",
      "properties": {
        "code": {
          "description": "Standard error code",
          "type": "string",
          "enum": [
            "err.request.bad",
            "err.request.unauthorized",
            "err.request.forbidden",
            "err.request.not_found",
            "err.request.timeout",
            "err.version.not_supported",
            "err.request.too_many_requests",
            "err.sender_id.invalid",
            "err.sender_uri.invalid",
            "err.receiver_id.invalid",
            "err.signature.missing",
            "err.signature.invalid",
            "err.encryption.invalid",
            "err.service.unavailable"
          ]
        },
        "message": {
          "description": "message to describe above error code",
          "type": "string",
          "maxLength": 999
        }
      }
    },
    "FileInfo": {
      "description": "File info. Used in file upload feature using HTTPS",
      "type": "object",
      "required": [
        "action",
        "fileName"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific actions. Usually verb from the URI should go here to help store and fwd kind of processing requirements.",
          "type": "string"
        },
        "fileFormat": {
          "description": "File content format. e.g json, csv, etc.,",
          "type": "string",
          "default": "json",
          "example": "csv"
        },
        "fileName": {
          "description": "Disbursement instruction file representing Disburse or OnDisburse end point elements i.e signature/header/message entities as a file record",
          "type": "string",
          "format": "binary"
        }
      }
    },
    "FinancialAddress": {
      "description": "\u003cbr\u003e 1. Financial address is case insensitive normative represenation of a store of value account represented as id-type:id@provider \u003cbr\u003e 2. Every payer/payee financial address must resolve to an actual store of value account number for processing the payment instruction \u003cbr\u003e 3. It is recommended the mapping between id and store of value account details to be held only at final store of value entity and intermediaries can hold  3. Few examples: \u003cbr\u003e - token@id-provider e.g token:12345@mosip \u003cbr\u003e - uid@pymt-rail e.g uid:12345@mosip \u003cbr\u003e - vid@id-provider e.g vid:12345@PhilID \u003cbr\u003e - mobile@mobile-provider e.g mobile:12345@m-pesa \u003cbr\u003e - account-id@bank-psp-code e.g account:12345@gtbank \u003cbr\u003e - account-no@ifsc-code.ifsc.npci e.g account:12345@HDFC0000001.ifsc.npci \u003cbr\u003e - user-id@psp-code e.g. joeuser@gtbank \u003cbr\u003e - token@psp-code e.g token:123456@sbi \u003cbr\u003e - code@purpose-code.voucher-provider e.g voucher:12345@food.sodexo \u003cbr\u003e - cdbc-id@cdbc e.g. 12345@DCash",
      "type": "string",
      "format": "^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$",
      "example": "token:12345@gtbank"
    },
    "FinancialAddressList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FinancialAddress"
      }
    },
    "KeyValueInfo": {
      "description": "Key Value info",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "maxLength": 99
        },
        "value": {
          "type": "string",
          "maxLength": 999
        }
      }
    },
    "LanguageCode": {
      "description": "indicates language code. G2P Connect supports country codes as per ISO 639.3 standard",
      "type": "string",
      "pattern": "^[a-z]{3,3}$",
      "example": "en"
    },
    "LinkRequest": {
      "description": "ID to Store of value account linking request",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mobile_number": {
          "type": "string"
        },
        "name": {
          "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.",
          "type": "string",
          "example": "Mr. John Smith"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "LinkResponse": {
      "description": "Beneficiary ID to Store of value account linking response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/LinkStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "LinkStatusReasonCode": {
      "description": "FA Mapper Link status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.id.invalid",
        "rjct.fa.invalid",
        "rjct.name.invalid",
        "rjct.mobile_number.invalid",
        "rjct.unknown.retry",
        "rjct.other.error"
      ]
    },
    "MsgCallbackHeader": {
      "description": "Message header",
      "type": "object",
      "required": [
        "message_id",
        "message_ts",
        "action",
        "status"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements.",
          "type": "string"
        },
        "completed_count": {
          "description": "No of requests in complteed state. Complete includes success and error requests due to funcational errors",
          "type": "integer",
          "example": 50
        },
        "is_encrypted": {
          "description": "Is message encrypted?",
          "type": "boolean",
          "default": true
        },
        "message_id": {
          "description": "Unique message id to communicate between sender and receiver systems. Receiving system should echo the orignial message_id for correlations.",
          "type": "string",
          "example": "123456789020211216223812"
        },
        "message_ts": {
          "description": "Time of message generation in RFC3339 format",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-04T18:02:35+00:00"
        },
        "receiver_id": {
          "description": "receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "registry.example.org"
        },
        "receiver_uri": {
          "description": "receiver url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": ""
        },
        "sender_id": {
          "description": "send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "pymts.example.org"
        },
        "sender_uri": {
          "description": "sender url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": ""
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/MsgHeaderStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for system/end users",
          "type": "string",
          "maxLength": 999
        },
        "total_count": {
          "description": "Total no of requests present in the message request",
          "type": "integer",
          "example": 21800
        },
        "version": {
          "description": "Messaing protocol specification version being used",
          "type": "string",
          "example": "0.1.0"
        }
      }
    },
    "MsgHeader": {
      "description": "Message header",
      "type": "object",
      "required": [
        "message_id",
        "message_ts",
        "action"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps identity payload type in message property.",
          "type": "string",
          "enum": [
            "search",
            "link",
            "resolve",
            "update",
            "unlink"
          ]
        },
        "is_encrypted": {
          "description": "Is message encrypted?",
          "type": "boolean",
          "default": true
        },
        "message_id": {
          "description": "Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,",
          "type": "string",
          "example": "123456789020211216223812"
        },
        "message_ts": {
          "description": "Time of message generation in RFC3339 format",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-04T18:01:07+00:00"
        },
        "receiver_id": {
          "description": "receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "pymts.example.org"
        },
        "sender_id": {
          "description": "send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "registry.example.org"
        },
        "sender_uri": {
          "description": "sender url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": "https://registry.sender.org/g2p/callback/on-disburse"
        },
        "total_count": {
          "description": "Total no of requests present in the message request",
          "type": "integer",
          "example": 21800
        },
        "version": {
          "description": "Messaing protocol specification version being used",
          "type": "string",
          "example": "0.1.0"
        }
      }
    },
    "MsgHeaderStatusReasonCode": {
      "description": "Message header related common status reason codes",
      "type": "string",
      "enum": [
        "rjct.version.invalid",
        "rjct.message_id.duplicate",
        "rjct.message_ts.invalid",
        "rjct.action.invalid",
        "rjct.action.not_supported",
        "rjct.total_count.invalid",
        "rjct.total_count.limit_exceeded",
        "rjct.errors.too_many"
      ]
    },
    "MsgSignature": {
      "description": "Signature of {header}+{message} body verified using sender's signing public key",
      "type": "string",
      "example": "Signature:  namespace=\"g2p\", kidId=\"{sender_id}|{unique_key_id}|{algorithm}\", algorithm=\"ed25519\", created=\"1606970629\", expires=\"1607030629\", headers=\"(created) (expires) digest\", signature=\"Base64(signing content)"
    },
    "PersonId": {
      "description": "\u003cbr\u003e 1. Beneficiary id is case insensitve normative represenation as id-type:id@provider \u003cbr\u003e 2. This will enumerate foundational and functioanl id's to easily resolvable addressess \u003cbr\u003e 3. This property is intended to unambiguously refer to an object, such as a person, organization, etc., \u003cbr\u003e 4. Few examples: \u003cbr\u003e - id@identifier-type.id-provider e.g token:12345@mosip, vid:12345@philid \u003cbr\u003e - id@civil-registry.issuing-agency e.g id:12345@rwanda, id:12345@ejanma.karnataka \u003cbr\u003e - id@functional-identifier.issuing-agency e.g id:12345@voter.Rwanda, id:12345@DL.karnataka, mobile:12345@fruits.karnataka \u003cbr\u003e Note: id provider should be made configurable and solutions should adapt to the local jurisdiction and policies.\u003cbr\u003e e.g fruits.karnataka represents farmer registry in karnataka state govt.\u003cbr\u003e",
      "type": "string",
      "format": "^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$",
      "example": "vid:12345@mosip"
    },
    "ReferenceId": {
      "description": "Unique reference_id set by txn initiating system for each request in a batch",
      "type": "string",
      "example": "12345678901234567890"
    },
    "ReferenceIdList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReferenceId"
      }
    },
    "RequestStatus": {
      "description": "Request (e.g disburse, link, unlink, resolve, issue, search, verify, etc.,) status: \u003cbr\u003e 1. rcvd: Received; Request received \u003cbr\u003e 2. pdng: Pending; Request initiated \u003cbr\u003e 3. succ: Success; Request successful \u003cbr\u003e 4. rjct: Rejected; Request rejected",
      "type": "string",
      "enum": [
        "rcvd",
        "pdng",
        "succ",
        "rjct"
      ]
    },
    "ResolveRequest": {
      "description": "1. If id is null then only verify and resolve fa is linked to store of value account. Verification is done by entity issuing fa.\n2. If id is not null then verify and resolve fa is linked store of value account. Additionally verify fa and id are issued to the same individual. If both conditions pass then resolve status can be set to yes.\n",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "name": {
          "$ref": "#/definitions/LinkRequest/properties/name"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "scope": {
          "description": "Resolve scope to return only yes_no or account provider or id details. Additional authorization based on caller to be enforced by the implementing system to return any sensitive data.",
          "type": "string",
          "default": "yes_no",
          "enum": [
            "yes_no",
            "details"
          ]
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "ResolveResponse": {
      "description": "Resolve financial address to store of value account info response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "account_provider_info": {
          "$ref": "#/definitions/AccountProviderInfo"
        },
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/ResolveStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "ResolveStatusReasonCode": {
      "description": "FA Mapper Resolve status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.id.invalid",
        "rjct.fa.invalid",
        "rjct.resolve_type.not_supported",
        "succ.fa.active",
        "succ.fa.inactive",
        "succ.fa.not_found",
        "succ.fa.not_linked_to_id",
        "succ.id.active",
        "succ.id.inactive",
        "succ.id.not_found"
      ]
    },
    "SearchRequest": {
      "description": "Request to search mapper requests",
      "type": "object",
      "required": [
        "reference_id",
        "request_type",
        "attribute_type",
        "attribute_value"
      ],
      "properties": {
        "attribute_type": {
          "type": "string",
          "enum": [
            "fa",
            "id"
          ]
        },
        "attribute_value": {},
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "request_type": {
          "type": "string",
          "enum": [
            "link",
            "unlink",
            "update",
            "resolve"
          ]
        }
      }
    },
    "SearchResponse": {
      "description": "Digital credential",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mapper": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResolveResponse"
          }
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/SearchStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reason code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "SearchStatusReasonCode": {
      "description": "Financial mapper search reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.request_type.invalid",
        "rjct.attribute_type.invalid",
        "rjct.srch_transaction_id.invalid",
        "rjct.srch_transaction_id.not_found",
        "rjct_srch_reference_id_invalid",
        "rjct_srch_reference_id_not_found",
        "rjct.reference_id.invalid",
        "rjct.srch_payer_fa.invalid",
        "rjct.srch_payee_fa.invalid",
        "rjct.share_attributes.invalid",
        "rjct.srch.too_many_record_found"
      ]
    },
    "Timestamp": {
      "description": "datetime in RFC3339 format",
      "type": "string",
      "format": "date-time",
      "example": "2022-12-04T17:20:07-04:00"
    },
    "TransactionId": {
      "description": "Unique transaction_id set by txn initiating system (i.e sender) to co-relate requests across processing systems/service end points",
      "type": "string",
      "maxLength": 99,
      "example": 12345678901234567000
    },
    "TxnStatusRequest": {
      "description": "Request to search disbursement using payer or payee fa",
      "type": "object",
      "required": [
        "reference_id",
        "search_type",
        "search_attribute"
      ],
      "properties": {
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "request_type": {
          "type": "string",
          "enum": [
            "link",
            "unlink",
            "update",
            "resolve"
          ]
        },
        "search_attribute": {},
        "search_type": {
          "type": "string",
          "enum": [
            "transaction_id",
            "reference_id_list"
          ]
        }
      }
    },
    "TxnStatusResponse": {
      "type": "array",
      "items": {},
      "example": {
        "status-response": {
          "fa": "test",
          "reference_id": "test",
          "status": "SUCC",
          "timestamp": "test"
        }
      }
    },
    "UnlinkRequest": {
      "description": "ID to Store of value account unlinking request. Unlink request removes entry against requested id/fa pair.",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UnlinkResponse": {
      "description": "ID to Store of value account unlinking response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/UnlinkStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UnlinkStatusReasonCode": {
      "description": "FA Mapper Unlink status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.beneficiary_name.invalid"
      ]
    },
    "UpdateRequest": {
      "description": "ID to Store of value account update request. ID can only unlinked.",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "description": "Additional info for interfacing DPGs platforms to integrate, reconcile, etc., unstructured data",
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mobile_number": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LinkRequest/properties/name"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UpdateResponse": {
      "description": "ID to Store of value account update response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "fa",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/UpdateStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UpdateStatusReasonCode": {
      "description": "FA Mapper Update status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.beneficiary_name.invalid"
      ]
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "ID Mapper",
    "version": "0.1.0"
  },
  "basePath": "/v0.1.0",
  "paths": {
    "/mapper/link": {
      "post": {
        "description": "Linking ID to Financial Address in the mapper registry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "post_g2p_mapper_link",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "link_request"
                  ],
                  "properties": {
                    "link_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LinkRequest"
                      }
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/resolve": {
      "post": {
        "description": "Resolve fa / beneficiary id to a store of value",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-RSLV : /mapper/resolve",
        "operationId": "post_g2p_mapper_resolve",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "resolve_request"
                  ],
                  "properties": {
                    "resolve_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ResolveRequest"
                      }
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/search": {
      "post": {
        "description": "Search mapper by searchable attributes",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-SRCH : /mapper/search",
        "operationId": "post_g2p_famap_search",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "search_request"
                  ],
                  "properties": {
                    "search_request": {
                      "$ref": "#/definitions/SearchRequest"
                    },
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/txn/status": {
      "post": {
        "description": "Perform async status check of previous mapper transanctions using searchable attributes",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-TXNSTS : /mapper/txn/status",
        "operationId": "post_g2p_mapper_txnstatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "txnstatus_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "txnstatus_request": {
                      "$ref": "#/definitions/TxnStatusRequest"
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/unlink": {
      "post": {
        "description": "Unlinking id from mapper registry",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-ULNK : /mapper/unlink",
        "operationId": "post_g2p_mapper_unlink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "unlink_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "unlink_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/UnlinkRequest"
                      }
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mapper/update": {
      "post": {
        "description": "Updating fa details against an id in mapper registry",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "FAMAP-UPDT\t: /mapper/update",
        "operationId": "put_g2p_mapper_update",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "header",
                "message"
              ],
              "properties": {
                "header": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/MsgHeader"
                    }
                  ]
                },
                "message": {
                  "type": "object",
                  "required": [
                    "transaction_id",
                    "update_request"
                  ],
                  "properties": {
                    "transaction_id": {
                      "$ref": "#/definitions/TransactionId"
                    },
                    "update_request": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/UpdateRequest"
                      }
                    }
                  }
                },
                "signature": {
                  "$ref": "#/definitions/MsgSignature"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "HTTP layer error details",
            "schema": {
              "description": "HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx",
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "error code",
                      "type": "string"
                    },
                    "message": {
                      "description": "error message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Acknowledgement of message received after successful validation of message and signature",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "ack_status": {
                      "$ref": "#/definitions/Ack"
                    },
                    "error": {
                      "$ref": "#/definitions/Error"
                    },
                    "timestamp": {
                      "$ref": "#/definitions/Timestamp"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccountInfo": {
      "description": "Beneficiary store of value account info",
      "type": "object",
      "required": [
        "name",
        "contact_info",
        "account_info"
      ],
      "properties": {
        "account_info": {
          "type": "object",
          "required": [
            "type",
            "number",
            "provider_info"
          ],
          "properties": {
            "additional_info": {
              "description": "Additional info, if any",
              "type": "string",
              "maxLength": 999
            },
            "number": {
              "description": "store of value account number",
              "type": "string",
              "example": "12345"
            },
            "provider_info": {
              "$ref": "#/definitions/AccountProviderInfo"
            },
            "type": {
              "description": "store of  value account type. e.g savings, checking, pre-paid, voucher, mobile-wallet, etc.,",
              "type": "string",
              "example": "savings"
            }
          }
        },
        "contact_info": {
          "description": "Person contact details",
          "properties": {
            "alt_email_id": {
              "type": "string"
            },
            "alt_mobile_number": {
              "type": "string"
            },
            "email_id": {
              "type": "string"
            },
            "mobile_number": {
              "type": "string"
            },
            "phone": {
              "description": "landline",
              "type": "string"
            }
          }
        },
        "name": {
          "$ref": "#/definitions/linkRequestName"
        }
      }
    },
    "AccountInfoAccountInfo": {
      "type": "object",
      "required": [
        "type",
        "number",
        "provider_info"
      ],
      "properties": {
        "additional_info": {
          "description": "Additional info, if any",
          "type": "string",
          "maxLength": 999
        },
        "number": {
          "description": "store of value account number",
          "type": "string",
          "example": "12345"
        },
        "provider_info": {
          "$ref": "#/definitions/AccountProviderInfo"
        },
        "type": {
          "description": "store of  value account type. e.g savings, checking, pre-paid, voucher, mobile-wallet, etc.,",
          "type": "string",
          "example": "savings"
        }
      }
    },
    "AccountInfoContactInfo": {
      "description": "Person contact details",
      "properties": {
        "alt_email_id": {
          "type": "string"
        },
        "alt_mobile_number": {
          "type": "string"
        },
        "email_id": {
          "type": "string"
        },
        "mobile_number": {
          "type": "string"
        },
        "phone": {
          "description": "landline",
          "type": "string"
        }
      }
    },
    "AccountProviderInfo": {
      "description": "Store of value account provider info",
      "type": "object",
      "required": [
        "name",
        "code"
      ],
      "properties": {
        "additional_info": {
          "description": "Additional info, if any",
          "type": "string",
          "maxLength": 999
        },
        "code": {
          "description": "code to identify the entity like bank, prepaid card/voucher issuing system, etc.,",
          "type": "string",
          "example": "GTBIRWRKXXX"
        },
        "name": {
          "description": "entity name like bank name, prepaid card/voucher issuing system, etc.,",
          "type": "string",
          "example": "GT Bank Rawanda"
        },
        "subcode": {
          "description": "sub code like entity's branch code, etc.,",
          "type": "string"
        }
      }
    },
    "Ack": {
      "description": "1. ACK: If the request is valid (for basic checks) and async callback (i.e webhook) will be invoked by reciever back to the sender.\n2. NACK: If the request is valid (for basic checks) and there is no futher updates from reciever back to the sender.\n3. ERR: If the reuqest is invalid and reciver can't process the request. error object holds error code, message.\n",
      "type": "string",
      "enum": [
        "ACK",
        "NACK",
        "ERR"
      ]
    },
    "Error": {
      "description": "Describes an error object that is returned to standard post call request. \u003cbr\u003e\n1. This object shall be sent when any request received by a participant is not parsable or message integrity check fails. \u003cbr\u003e\n2. This object may be used across all transport protocols to acknowledge the receipt of a message i.e HTTPS, FTP, Messaging etc., \u003cbr\u003e\"\n",
      "type": "object",
      "properties": {
        "code": {
          "description": "Standard error code",
          "type": "string",
          "enum": [
            "err.request.bad",
            "err.request.unauthorized",
            "err.request.forbidden",
            "err.request.not_found",
            "err.request.timeout",
            "err.version.not_supported",
            "err.request.too_many_requests",
            "err.sender_id.invalid",
            "err.sender_uri.invalid",
            "err.receiver_id.invalid",
            "err.signature.missing",
            "err.signature.invalid",
            "err.encryption.invalid",
            "err.service.unavailable"
          ]
        },
        "message": {
          "description": "message to describe above error code",
          "type": "string",
          "maxLength": 999
        }
      }
    },
    "FileInfo": {
      "description": "File info. Used in file upload feature using HTTPS",
      "type": "object",
      "required": [
        "action",
        "fileName"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific actions. Usually verb from the URI should go here to help store and fwd kind of processing requirements.",
          "type": "string"
        },
        "fileFormat": {
          "description": "File content format. e.g json, csv, etc.,",
          "type": "string",
          "default": "json",
          "example": "csv"
        },
        "fileName": {
          "description": "Disbursement instruction file representing Disburse or OnDisburse end point elements i.e signature/header/message entities as a file record",
          "type": "string",
          "format": "binary"
        }
      }
    },
    "FinancialAddress": {
      "description": "\u003cbr\u003e 1. Financial address is case insensitive normative represenation of a store of value account represented as id-type:id@provider \u003cbr\u003e 2. Every payer/payee financial address must resolve to an actual store of value account number for processing the payment instruction \u003cbr\u003e 3. It is recommended the mapping between id and store of value account details to be held only at final store of value entity and intermediaries can hold  3. Few examples: \u003cbr\u003e - token@id-provider e.g token:12345@mosip \u003cbr\u003e - uid@pymt-rail e.g uid:12345@mosip \u003cbr\u003e - vid@id-provider e.g vid:12345@PhilID \u003cbr\u003e - mobile@mobile-provider e.g mobile:12345@m-pesa \u003cbr\u003e - account-id@bank-psp-code e.g account:12345@gtbank \u003cbr\u003e - account-no@ifsc-code.ifsc.npci e.g account:12345@HDFC0000001.ifsc.npci \u003cbr\u003e - user-id@psp-code e.g. joeuser@gtbank \u003cbr\u003e - token@psp-code e.g token:123456@sbi \u003cbr\u003e - code@purpose-code.voucher-provider e.g voucher:12345@food.sodexo \u003cbr\u003e - cdbc-id@cdbc e.g. 12345@DCash",
      "type": "string",
      "format": "^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$",
      "example": "token:12345@gtbank"
    },
    "FinancialAddressList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FinancialAddress"
      }
    },
    "KeyValueInfo": {
      "description": "Key Value info",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "maxLength": 99
        },
        "value": {
          "type": "string",
          "maxLength": 999
        }
      }
    },
    "LanguageCode": {
      "description": "indicates language code. G2P Connect supports country codes as per ISO 639.3 standard",
      "type": "string",
      "pattern": "^[a-z]{3,3}$",
      "example": "en"
    },
    "LinkRequest": {
      "description": "ID to Store of value account linking request",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mobile_number": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/linkRequestName"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "LinkResponse": {
      "description": "Beneficiary ID to Store of value account linking response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/LinkStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "LinkStatusReasonCode": {
      "description": "FA Mapper Link status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.id.invalid",
        "rjct.fa.invalid",
        "rjct.name.invalid",
        "rjct.mobile_number.invalid",
        "rjct.unknown.retry",
        "rjct.other.error"
      ]
    },
    "MsgCallbackHeader": {
      "description": "Message header",
      "type": "object",
      "required": [
        "message_id",
        "message_ts",
        "action",
        "status"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific action. Usually verb from the URI should go here to help store and fwd kind of processing requirements.",
          "type": "string"
        },
        "completed_count": {
          "description": "No of requests in complteed state. Complete includes success and error requests due to funcational errors",
          "type": "integer",
          "example": 50
        },
        "is_encrypted": {
          "description": "Is message encrypted?",
          "type": "boolean",
          "default": true
        },
        "message_id": {
          "description": "Unique message id to communicate between sender and receiver systems. Receiving system should echo the orignial message_id for correlations.",
          "type": "string",
          "example": "123456789020211216223812"
        },
        "message_ts": {
          "description": "Time of message generation in RFC3339 format",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-04T18:02:35+00:00"
        },
        "receiver_id": {
          "description": "receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "registry.example.org"
        },
        "receiver_uri": {
          "description": "receiver url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": ""
        },
        "sender_id": {
          "description": "send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "pymts.example.org"
        },
        "sender_uri": {
          "description": "sender url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": ""
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/MsgHeaderStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for system/end users",
          "type": "string",
          "maxLength": 999
        },
        "total_count": {
          "description": "Total no of requests present in the message request",
          "type": "integer",
          "example": 21800
        },
        "version": {
          "description": "Messaing protocol specification version being used",
          "type": "string",
          "example": "0.1.0"
        }
      }
    },
    "MsgHeader": {
      "description": "Message header",
      "type": "object",
      "required": [
        "message_id",
        "message_ts",
        "action"
      ],
      "properties": {
        "action": {
          "description": "G2P Connect specific action. Usually verb from the URI. Helps in sync, async, store/fwd processing. Helps identity payload type in message property.",
          "type": "string",
          "enum": [
            "search",
            "link",
            "resolve",
            "update",
            "unlink"
          ]
        },
        "is_encrypted": {
          "description": "Is message encrypted?",
          "type": "boolean",
          "default": true
        },
        "message_id": {
          "description": "Unique message id to communicate between sender and receiver systems to realiable deliver the message over any transport layer i.e https, pub/sub, sftp etc.,",
          "type": "string",
          "example": "123456789020211216223812"
        },
        "message_ts": {
          "description": "Time of message generation in RFC3339 format",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-04T18:01:07+00:00"
        },
        "receiver_id": {
          "description": "receiver id registered with the calling system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "pymts.example.org"
        },
        "sender_id": {
          "description": "send id registered with the receiving system. Used for authorization, encryption, digital sign verfication, etc., functions.",
          "type": "string",
          "example": "registry.example.org"
        },
        "sender_uri": {
          "description": "sender url to accept callbacks",
          "type": "string",
          "format": "uri",
          "example": "https://registry.sender.org/g2p/callback/on-disburse"
        },
        "total_count": {
          "description": "Total no of requests present in the message request",
          "type": "integer",
          "example": 21800
        },
        "version": {
          "description": "Messaing protocol specification version being used",
          "type": "string",
          "example": "0.1.0"
        }
      }
    },
    "MsgHeaderStatusReasonCode": {
      "description": "Message header related common status reason codes",
      "type": "string",
      "enum": [
        "rjct.version.invalid",
        "rjct.message_id.duplicate",
        "rjct.message_ts.invalid",
        "rjct.action.invalid",
        "rjct.action.not_supported",
        "rjct.total_count.invalid",
        "rjct.total_count.limit_exceeded",
        "rjct.errors.too_many"
      ]
    },
    "MsgSignature": {
      "description": "Signature of {header}+{message} body verified using sender's signing public key",
      "type": "string",
      "example": "Signature:  namespace=\"g2p\", kidId=\"{sender_id}|{unique_key_id}|{algorithm}\", algorithm=\"ed25519\", created=\"1606970629\", expires=\"1607030629\", headers=\"(created) (expires) digest\", signature=\"Base64(signing content)"
    },
    "PersonId": {
      "description": "\u003cbr\u003e 1. Beneficiary id is case insensitve normative represenation as id-type:id@provider \u003cbr\u003e 2. This will enumerate foundational and functioanl id's to easily resolvable addressess \u003cbr\u003e 3. This property is intended to unambiguously refer to an object, such as a person, organization, etc., \u003cbr\u003e 4. Few examples: \u003cbr\u003e - id@identifier-type.id-provider e.g token:12345@mosip, vid:12345@philid \u003cbr\u003e - id@civil-registry.issuing-agency e.g id:12345@rwanda, id:12345@ejanma.karnataka \u003cbr\u003e - id@functional-identifier.issuing-agency e.g id:12345@voter.Rwanda, id:12345@DL.karnataka, mobile:12345@fruits.karnataka \u003cbr\u003e Note: id provider should be made configurable and solutions should adapt to the local jurisdiction and policies.\u003cbr\u003e e.g fruits.karnataka represents farmer registry in karnataka state govt.\u003cbr\u003e",
      "type": "string",
      "format": "^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+$",
      "example": "vid:12345@mosip"
    },
    "PostG2pFamapSearchDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PostG2pFamapSearchForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pFamapSearchInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pFamapSearchParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "search_request"
      ],
      "properties": {
        "search_request": {
          "$ref": "#/definitions/SearchRequest"
        },
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        }
      }
    },
    "PostG2pFamapSearchUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperLinkDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PostG2pMapperLinkForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperLinkInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperLinkParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "link_request"
      ],
      "properties": {
        "link_request": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkRequest"
          }
        },
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        }
      }
    },
    "PostG2pMapperLinkUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperResolveDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PostG2pMapperResolveForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperResolveInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperResolveParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "resolve_request"
      ],
      "properties": {
        "resolve_request": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResolveRequest"
          }
        },
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        }
      }
    },
    "PostG2pMapperResolveUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperTxnstatusDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PostG2pMapperTxnstatusForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperTxnstatusInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperTxnstatusParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "txnstatus_request"
      ],
      "properties": {
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        },
        "txnstatus_request": {
          "$ref": "#/definitions/TxnStatusRequest"
        }
      }
    },
    "PostG2pMapperTxnstatusUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperUnlinkDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PostG2pMapperUnlinkForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperUnlinkInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PostG2pMapperUnlinkParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "unlink_request"
      ],
      "properties": {
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        },
        "unlink_request": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnlinkRequest"
          }
        }
      }
    },
    "PostG2pMapperUnlinkUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PutG2pMapperUpdateDefaultBodyMessage": {
      "type": "object",
      "properties": {
        "ack_status": {
          "$ref": "#/definitions/Ack"
        },
        "error": {
          "$ref": "#/definitions/Error"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "PutG2pMapperUpdateForbiddenBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PutG2pMapperUpdateInternalServerErrorBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "PutG2pMapperUpdateParamsBodyMessage": {
      "type": "object",
      "required": [
        "transaction_id",
        "update_request"
      ],
      "properties": {
        "transaction_id": {
          "$ref": "#/definitions/TransactionId"
        },
        "update_request": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateRequest"
          }
        }
      }
    },
    "PutG2pMapperUpdateUnauthorizedBodyError": {
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "string"
        },
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "ReferenceId": {
      "description": "Unique reference_id set by txn initiating system for each request in a batch",
      "type": "string",
      "example": "12345678901234567890"
    },
    "ReferenceIdList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReferenceId"
      }
    },
    "RequestStatus": {
      "description": "Request (e.g disburse, link, unlink, resolve, issue, search, verify, etc.,) status: \u003cbr\u003e 1. rcvd: Received; Request received \u003cbr\u003e 2. pdng: Pending; Request initiated \u003cbr\u003e 3. succ: Success; Request successful \u003cbr\u003e 4. rjct: Rejected; Request rejected",
      "type": "string",
      "enum": [
        "rcvd",
        "pdng",
        "succ",
        "rjct"
      ]
    },
    "ResolveRequest": {
      "description": "1. If id is null then only verify and resolve fa is linked to store of value account. Verification is done by entity issuing fa.\n2. If id is not null then verify and resolve fa is linked store of value account. Additionally verify fa and id are issued to the same individual. If both conditions pass then resolve status can be set to yes.\n",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "name": {
          "$ref": "#/definitions/linkRequestName"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "scope": {
          "description": "Resolve scope to return only yes_no or account provider or id details. Additional authorization based on caller to be enforced by the implementing system to return any sensitive data.",
          "type": "string",
          "default": "yes_no",
          "enum": [
            "yes_no",
            "details"
          ]
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "ResolveResponse": {
      "description": "Resolve financial address to store of value account info response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "account_provider_info": {
          "$ref": "#/definitions/AccountProviderInfo"
        },
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/ResolveStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "ResolveStatusReasonCode": {
      "description": "FA Mapper Resolve status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.id.invalid",
        "rjct.fa.invalid",
        "rjct.resolve_type.not_supported",
        "succ.fa.active",
        "succ.fa.inactive",
        "succ.fa.not_found",
        "succ.fa.not_linked_to_id",
        "succ.id.active",
        "succ.id.inactive",
        "succ.id.not_found"
      ]
    },
    "SearchRequest": {
      "description": "Request to search mapper requests",
      "type": "object",
      "required": [
        "reference_id",
        "request_type",
        "attribute_type",
        "attribute_value"
      ],
      "properties": {
        "attribute_type": {
          "type": "string",
          "enum": [
            "fa",
            "id"
          ]
        },
        "attribute_value": {},
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "request_type": {
          "type": "string",
          "enum": [
            "link",
            "unlink",
            "update",
            "resolve"
          ]
        }
      }
    },
    "SearchResponse": {
      "description": "Digital credential",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mapper": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResolveResponse"
          }
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/SearchStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reason code message. Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "SearchStatusReasonCode": {
      "description": "Financial mapper search reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.request_type.invalid",
        "rjct.attribute_type.invalid",
        "rjct.srch_transaction_id.invalid",
        "rjct.srch_transaction_id.not_found",
        "rjct_srch_reference_id_invalid",
        "rjct_srch_reference_id_not_found",
        "rjct.reference_id.invalid",
        "rjct.srch_payer_fa.invalid",
        "rjct.srch_payee_fa.invalid",
        "rjct.share_attributes.invalid",
        "rjct.srch.too_many_record_found"
      ]
    },
    "Timestamp": {
      "description": "datetime in RFC3339 format",
      "type": "string",
      "format": "date-time",
      "example": "2022-12-04T17:20:07-04:00"
    },
    "TransactionId": {
      "description": "Unique transaction_id set by txn initiating system (i.e sender) to co-relate requests across processing systems/service end points",
      "type": "string",
      "maxLength": 99,
      "example": 12345678901234567000
    },
    "TxnStatusRequest": {
      "description": "Request to search disbursement using payer or payee fa",
      "type": "object",
      "required": [
        "reference_id",
        "search_type",
        "search_attribute"
      ],
      "properties": {
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "request_type": {
          "type": "string",
          "enum": [
            "link",
            "unlink",
            "update",
            "resolve"
          ]
        },
        "search_attribute": {},
        "search_type": {
          "type": "string",
          "enum": [
            "transaction_id",
            "reference_id_list"
          ]
        }
      }
    },
    "TxnStatusResponse": {
      "type": "array",
      "items": {},
      "example": {
        "status-response": {
          "fa": "test",
          "reference_id": "test",
          "status": "SUCC",
          "timestamp": "test"
        }
      }
    },
    "UnlinkRequest": {
      "description": "ID to Store of value account unlinking request. Unlink request removes entry against requested id/fa pair.",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UnlinkResponse": {
      "description": "ID to Store of value account unlinking response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/UnlinkStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UnlinkStatusReasonCode": {
      "description": "FA Mapper Unlink status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.beneficiary_name.invalid"
      ]
    },
    "UpdateRequest": {
      "description": "ID to Store of value account update request. ID can only unlinked.",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "id",
        "fa"
      ],
      "properties": {
        "additional_info": {
          "description": "Additional info for interfacing DPGs platforms to integrate, reconcile, etc., unstructured data",
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "mobile_number": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/linkRequestName"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UpdateResponse": {
      "description": "ID to Store of value account update response",
      "type": "object",
      "required": [
        "reference_id",
        "timestamp",
        "fa",
        "status"
      ],
      "properties": {
        "additional_info": {
          "$ref": "#/definitions/KeyValueInfo"
        },
        "fa": {
          "$ref": "#/definitions/FinancialAddress"
        },
        "id": {
          "$ref": "#/definitions/PersonId"
        },
        "locale": {
          "$ref": "#/definitions/LanguageCode"
        },
        "reference_id": {
          "$ref": "#/definitions/ReferenceId"
        },
        "status": {
          "$ref": "#/definitions/RequestStatus"
        },
        "status_reason_code": {
          "$ref": "#/definitions/UpdateStatusReasonCode"
        },
        "status_reason_message": {
          "description": "Status reascon code message, if any, Helps actionanble messaging for systems/end users",
          "type": "string",
          "maxLength": 999
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      }
    },
    "UpdateStatusReasonCode": {
      "description": "FA Mapper Update status reason codes",
      "type": "string",
      "enum": [
        "rjct.reference_id.invalid",
        "rjct.reference_id.duplicate",
        "rjct.timestamp.invalid",
        "rjct.beneficiary_name.invalid"
      ]
    },
    "linkRequestName": {
      "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.",
      "type": "string",
      "x-go-gen-location": "models",
      "example": "Mr. John Smith"
    }
  }
}`))
}
