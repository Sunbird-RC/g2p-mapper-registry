// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostG2pMapperLinkUnauthorizedCode is the HTTP code returned for type PostG2pMapperLinkUnauthorized
const PostG2pMapperLinkUnauthorizedCode int = 401

/*
PostG2pMapperLinkUnauthorized HTTP layer error details

swagger:response postG2pMapperLinkUnauthorized
*/
type PostG2pMapperLinkUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperLinkUnauthorizedBody `json:"body,omitempty"`
}

// NewPostG2pMapperLinkUnauthorized creates PostG2pMapperLinkUnauthorized with default headers values
func NewPostG2pMapperLinkUnauthorized() *PostG2pMapperLinkUnauthorized {

	return &PostG2pMapperLinkUnauthorized{}
}

// WithPayload adds the payload to the post g2p mapper link unauthorized response
func (o *PostG2pMapperLinkUnauthorized) WithPayload(payload *PostG2pMapperLinkUnauthorizedBody) *PostG2pMapperLinkUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper link unauthorized response
func (o *PostG2pMapperLinkUnauthorized) SetPayload(payload *PostG2pMapperLinkUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperLinkUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperLinkForbiddenCode is the HTTP code returned for type PostG2pMapperLinkForbidden
const PostG2pMapperLinkForbiddenCode int = 403

/*
PostG2pMapperLinkForbidden HTTP layer error details

swagger:response postG2pMapperLinkForbidden
*/
type PostG2pMapperLinkForbidden struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperLinkForbiddenBody `json:"body,omitempty"`
}

// NewPostG2pMapperLinkForbidden creates PostG2pMapperLinkForbidden with default headers values
func NewPostG2pMapperLinkForbidden() *PostG2pMapperLinkForbidden {

	return &PostG2pMapperLinkForbidden{}
}

// WithPayload adds the payload to the post g2p mapper link forbidden response
func (o *PostG2pMapperLinkForbidden) WithPayload(payload *PostG2pMapperLinkForbiddenBody) *PostG2pMapperLinkForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper link forbidden response
func (o *PostG2pMapperLinkForbidden) SetPayload(payload *PostG2pMapperLinkForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperLinkForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperLinkInternalServerErrorCode is the HTTP code returned for type PostG2pMapperLinkInternalServerError
const PostG2pMapperLinkInternalServerErrorCode int = 500

/*
PostG2pMapperLinkInternalServerError HTTP layer error details

swagger:response postG2pMapperLinkInternalServerError
*/
type PostG2pMapperLinkInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperLinkInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostG2pMapperLinkInternalServerError creates PostG2pMapperLinkInternalServerError with default headers values
func NewPostG2pMapperLinkInternalServerError() *PostG2pMapperLinkInternalServerError {

	return &PostG2pMapperLinkInternalServerError{}
}

// WithPayload adds the payload to the post g2p mapper link internal server error response
func (o *PostG2pMapperLinkInternalServerError) WithPayload(payload *PostG2pMapperLinkInternalServerErrorBody) *PostG2pMapperLinkInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper link internal server error response
func (o *PostG2pMapperLinkInternalServerError) SetPayload(payload *PostG2pMapperLinkInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperLinkInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostG2pMapperLinkDefault Acknowledgement of message received after successful validation of message and signature

swagger:response postG2pMapperLinkDefault
*/
type PostG2pMapperLinkDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *PostG2pMapperLinkDefaultBody `json:"body,omitempty"`
}

// NewPostG2pMapperLinkDefault creates PostG2pMapperLinkDefault with default headers values
func NewPostG2pMapperLinkDefault(code int) *PostG2pMapperLinkDefault {
	if code <= 0 {
		code = 500
	}

	return &PostG2pMapperLinkDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post g2p mapper link default response
func (o *PostG2pMapperLinkDefault) WithStatusCode(code int) *PostG2pMapperLinkDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post g2p mapper link default response
func (o *PostG2pMapperLinkDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post g2p mapper link default response
func (o *PostG2pMapperLinkDefault) WithPayload(payload *PostG2pMapperLinkDefaultBody) *PostG2pMapperLinkDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper link default response
func (o *PostG2pMapperLinkDefault) SetPayload(payload *PostG2pMapperLinkDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperLinkDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
