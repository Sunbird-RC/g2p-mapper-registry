// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sunbirdrc/mapper-service/swagger_gen/models"
)

// PostG2pMapperUnlinkHandlerFunc turns a function with the right signature into a post g2p mapper unlink handler
type PostG2pMapperUnlinkHandlerFunc func(PostG2pMapperUnlinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostG2pMapperUnlinkHandlerFunc) Handle(params PostG2pMapperUnlinkParams) middleware.Responder {
	return fn(params)
}

// PostG2pMapperUnlinkHandler interface for that can handle valid post g2p mapper unlink params
type PostG2pMapperUnlinkHandler interface {
	Handle(PostG2pMapperUnlinkParams) middleware.Responder
}

// NewPostG2pMapperUnlink creates a new http.Handler for the post g2p mapper unlink operation
func NewPostG2pMapperUnlink(ctx *middleware.Context, handler PostG2pMapperUnlinkHandler) *PostG2pMapperUnlink {
	return &PostG2pMapperUnlink{Context: ctx, Handler: handler}
}

/*
	PostG2pMapperUnlink swagger:route POST /mapper/unlink postG2pMapperUnlink

FAMAP-ULNK : /mapper/unlink

Unlinking id from mapper registry
*/
type PostG2pMapperUnlink struct {
	Context *middleware.Context
	Handler PostG2pMapperUnlinkHandler
}

func (o *PostG2pMapperUnlink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostG2pMapperUnlinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostG2pMapperUnlinkBody post g2p mapper unlink body
//
// swagger:model PostG2pMapperUnlinkBody
type PostG2pMapperUnlinkBody struct {

	// header
	// Required: true
	Header struct {
		models.MsgHeader
	} `json:"header"`

	// message
	// Required: true
	Message *PostG2pMapperUnlinkParamsBodyMessage `json:"message"`

	// signature
	Signature models.MsgSignature `json:"signature,omitempty"`
}

// Validate validates this post g2p mapper unlink body
func (o *PostG2pMapperUnlinkBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkBody) validateHeader(formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperUnlinkBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if err := o.Signature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink body based on the context it is used
func (o *PostG2pMapperUnlinkBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkBody) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperUnlinkBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signature.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkDefaultBody post g2p mapper unlink default body
//
// swagger:model PostG2pMapperUnlinkDefaultBody
type PostG2pMapperUnlinkDefaultBody struct {

	// message
	Message *PostG2pMapperUnlinkDefaultBodyMessage `json:"message,omitempty"`
}

// Validate validates this post g2p mapper unlink default body
func (o *PostG2pMapperUnlinkDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkDefaultBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink default body based on the context it is used
func (o *PostG2pMapperUnlinkDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkDefaultBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkDefaultBodyMessage post g2p mapper unlink default body message
//
// swagger:model PostG2pMapperUnlinkDefaultBodyMessage
type PostG2pMapperUnlinkDefaultBodyMessage struct {

	// ack status
	AckStatus models.Ack `json:"ack_status,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp models.Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this post g2p mapper unlink default body message
func (o *PostG2pMapperUnlinkDefaultBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAckStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) validateAckStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AckStatus) { // not required
		return nil
	}

	if err := o.AckStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := o.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink default body message based on the context it is used
func (o *PostG2pMapperUnlinkDefaultBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAckStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) contextValidateAckStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := o.AckStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkDefaultBodyMessage) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_unlink default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkDefaultBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkDefaultBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkDefaultBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkForbiddenBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperUnlinkForbiddenBody
type PostG2pMapperUnlinkForbiddenBody struct {

	// error
	Error *PostG2pMapperUnlinkForbiddenBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper unlink forbidden body
func (o *PostG2pMapperUnlinkForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkForbiddenBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink forbidden body based on the context it is used
func (o *PostG2pMapperUnlinkForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkForbiddenBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkForbiddenBodyError post g2p mapper unlink forbidden body error
//
// swagger:model PostG2pMapperUnlinkForbiddenBodyError
type PostG2pMapperUnlinkForbiddenBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper unlink forbidden body error
func (o *PostG2pMapperUnlinkForbiddenBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper unlink forbidden body error based on context it is used
func (o *PostG2pMapperUnlinkForbiddenBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkInternalServerErrorBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperUnlinkInternalServerErrorBody
type PostG2pMapperUnlinkInternalServerErrorBody struct {

	// error
	Error *PostG2pMapperUnlinkInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper unlink internal server error body
func (o *PostG2pMapperUnlinkInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink internal server error body based on the context it is used
func (o *PostG2pMapperUnlinkInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkInternalServerErrorBodyError post g2p mapper unlink internal server error body error
//
// swagger:model PostG2pMapperUnlinkInternalServerErrorBodyError
type PostG2pMapperUnlinkInternalServerErrorBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper unlink internal server error body error
func (o *PostG2pMapperUnlinkInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper unlink internal server error body error based on context it is used
func (o *PostG2pMapperUnlinkInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkParamsBodyMessage post g2p mapper unlink params body message
//
// swagger:model PostG2pMapperUnlinkParamsBodyMessage
type PostG2pMapperUnlinkParamsBodyMessage struct {

	// transaction id
	// Required: true
	TransactionID *models.TransactionID `json:"transaction_id"`

	// unlink request
	// Required: true
	UnlinkRequest []*models.UnlinkRequest `json:"unlink_request"`
}

// Validate validates this post g2p mapper unlink params body message
func (o *PostG2pMapperUnlinkParamsBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnlinkRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkParamsBodyMessage) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if o.TransactionID != nil {
		if err := o.TransactionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkParamsBodyMessage) validateUnlinkRequest(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"unlink_request", "body", o.UnlinkRequest); err != nil {
		return err
	}

	for i := 0; i < len(o.UnlinkRequest); i++ {
		if swag.IsZero(o.UnlinkRequest[i]) { // not required
			continue
		}

		if o.UnlinkRequest[i] != nil {
			if err := o.UnlinkRequest[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "unlink_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "unlink_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink params body message based on the context it is used
func (o *PostG2pMapperUnlinkParamsBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUnlinkRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkParamsBodyMessage) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionID != nil {
		if err := o.TransactionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperUnlinkParamsBodyMessage) contextValidateUnlinkRequest(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UnlinkRequest); i++ {

		if o.UnlinkRequest[i] != nil {
			if err := o.UnlinkRequest[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "unlink_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "unlink_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkParamsBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkParamsBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkParamsBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkUnauthorizedBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperUnlinkUnauthorizedBody
type PostG2pMapperUnlinkUnauthorizedBody struct {

	// error
	Error *PostG2pMapperUnlinkUnauthorizedBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper unlink unauthorized body
func (o *PostG2pMapperUnlinkUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper unlink unauthorized body based on the context it is used
func (o *PostG2pMapperUnlinkUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperUnlinkUnauthorizedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperUnlinkUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperUnlinkUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperUnlinkUnauthorizedBodyError post g2p mapper unlink unauthorized body error
//
// swagger:model PostG2pMapperUnlinkUnauthorizedBodyError
type PostG2pMapperUnlinkUnauthorizedBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper unlink unauthorized body error
func (o *PostG2pMapperUnlinkUnauthorizedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper unlink unauthorized body error based on context it is used
func (o *PostG2pMapperUnlinkUnauthorizedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperUnlinkUnauthorizedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperUnlinkUnauthorizedBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperUnlinkUnauthorizedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
