// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostG2pMapperUnlinkUnauthorizedCode is the HTTP code returned for type PostG2pMapperUnlinkUnauthorized
const PostG2pMapperUnlinkUnauthorizedCode int = 401

/*
PostG2pMapperUnlinkUnauthorized HTTP layer error details

swagger:response postG2pMapperUnlinkUnauthorized
*/
type PostG2pMapperUnlinkUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperUnlinkUnauthorizedBody `json:"body,omitempty"`
}

// NewPostG2pMapperUnlinkUnauthorized creates PostG2pMapperUnlinkUnauthorized with default headers values
func NewPostG2pMapperUnlinkUnauthorized() *PostG2pMapperUnlinkUnauthorized {

	return &PostG2pMapperUnlinkUnauthorized{}
}

// WithPayload adds the payload to the post g2p mapper unlink unauthorized response
func (o *PostG2pMapperUnlinkUnauthorized) WithPayload(payload *PostG2pMapperUnlinkUnauthorizedBody) *PostG2pMapperUnlinkUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper unlink unauthorized response
func (o *PostG2pMapperUnlinkUnauthorized) SetPayload(payload *PostG2pMapperUnlinkUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperUnlinkUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperUnlinkForbiddenCode is the HTTP code returned for type PostG2pMapperUnlinkForbidden
const PostG2pMapperUnlinkForbiddenCode int = 403

/*
PostG2pMapperUnlinkForbidden HTTP layer error details

swagger:response postG2pMapperUnlinkForbidden
*/
type PostG2pMapperUnlinkForbidden struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperUnlinkForbiddenBody `json:"body,omitempty"`
}

// NewPostG2pMapperUnlinkForbidden creates PostG2pMapperUnlinkForbidden with default headers values
func NewPostG2pMapperUnlinkForbidden() *PostG2pMapperUnlinkForbidden {

	return &PostG2pMapperUnlinkForbidden{}
}

// WithPayload adds the payload to the post g2p mapper unlink forbidden response
func (o *PostG2pMapperUnlinkForbidden) WithPayload(payload *PostG2pMapperUnlinkForbiddenBody) *PostG2pMapperUnlinkForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper unlink forbidden response
func (o *PostG2pMapperUnlinkForbidden) SetPayload(payload *PostG2pMapperUnlinkForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperUnlinkForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostG2pMapperUnlinkInternalServerErrorCode is the HTTP code returned for type PostG2pMapperUnlinkInternalServerError
const PostG2pMapperUnlinkInternalServerErrorCode int = 500

/*
PostG2pMapperUnlinkInternalServerError HTTP layer error details

swagger:response postG2pMapperUnlinkInternalServerError
*/
type PostG2pMapperUnlinkInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostG2pMapperUnlinkInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostG2pMapperUnlinkInternalServerError creates PostG2pMapperUnlinkInternalServerError with default headers values
func NewPostG2pMapperUnlinkInternalServerError() *PostG2pMapperUnlinkInternalServerError {

	return &PostG2pMapperUnlinkInternalServerError{}
}

// WithPayload adds the payload to the post g2p mapper unlink internal server error response
func (o *PostG2pMapperUnlinkInternalServerError) WithPayload(payload *PostG2pMapperUnlinkInternalServerErrorBody) *PostG2pMapperUnlinkInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper unlink internal server error response
func (o *PostG2pMapperUnlinkInternalServerError) SetPayload(payload *PostG2pMapperUnlinkInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperUnlinkInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostG2pMapperUnlinkDefault Acknowledgement of message received after successful validation of message and signature

swagger:response postG2pMapperUnlinkDefault
*/
type PostG2pMapperUnlinkDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *PostG2pMapperUnlinkDefaultBody `json:"body,omitempty"`
}

// NewPostG2pMapperUnlinkDefault creates PostG2pMapperUnlinkDefault with default headers values
func NewPostG2pMapperUnlinkDefault(code int) *PostG2pMapperUnlinkDefault {
	if code <= 0 {
		code = 500
	}

	return &PostG2pMapperUnlinkDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post g2p mapper unlink default response
func (o *PostG2pMapperUnlinkDefault) WithStatusCode(code int) *PostG2pMapperUnlinkDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post g2p mapper unlink default response
func (o *PostG2pMapperUnlinkDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post g2p mapper unlink default response
func (o *PostG2pMapperUnlinkDefault) WithPayload(payload *PostG2pMapperUnlinkDefaultBody) *PostG2pMapperUnlinkDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post g2p mapper unlink default response
func (o *PostG2pMapperUnlinkDefault) SetPayload(payload *PostG2pMapperUnlinkDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostG2pMapperUnlinkDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
