// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sunbirdrc/mapper-service/swagger_gen/models"
)

// PutG2pMapperUpdateHandlerFunc turns a function with the right signature into a put g2p mapper update handler
type PutG2pMapperUpdateHandlerFunc func(PutG2pMapperUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutG2pMapperUpdateHandlerFunc) Handle(params PutG2pMapperUpdateParams) middleware.Responder {
	return fn(params)
}

// PutG2pMapperUpdateHandler interface for that can handle valid put g2p mapper update params
type PutG2pMapperUpdateHandler interface {
	Handle(PutG2pMapperUpdateParams) middleware.Responder
}

// NewPutG2pMapperUpdate creates a new http.Handler for the put g2p mapper update operation
func NewPutG2pMapperUpdate(ctx *middleware.Context, handler PutG2pMapperUpdateHandler) *PutG2pMapperUpdate {
	return &PutG2pMapperUpdate{Context: ctx, Handler: handler}
}

/*
	PutG2pMapperUpdate swagger:route POST /mapper/update putG2pMapperUpdate

FAMAP-UPDT	: /mapper/update

Updating fa details against an id in mapper registry
*/
type PutG2pMapperUpdate struct {
	Context *middleware.Context
	Handler PutG2pMapperUpdateHandler
}

func (o *PutG2pMapperUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutG2pMapperUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutG2pMapperUpdateBody put g2p mapper update body
//
// swagger:model PutG2pMapperUpdateBody
type PutG2pMapperUpdateBody struct {

	// header
	// Required: true
	Header struct {
		models.MsgHeader
	} `json:"header"`

	// message
	// Required: true
	Message *PutG2pMapperUpdateParamsBodyMessage `json:"message"`

	// signature
	Signature models.MsgSignature `json:"signature,omitempty"`
}

// Validate validates this put g2p mapper update body
func (o *PutG2pMapperUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateBody) validateHeader(formats strfmt.Registry) error {

	return nil
}

func (o *PutG2pMapperUpdateBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if err := o.Signature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// ContextValidate validate this put g2p mapper update body based on the context it is used
func (o *PutG2pMapperUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateBody) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *PutG2pMapperUpdateBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signature.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateBody) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateDefaultBody put g2p mapper update default body
//
// swagger:model PutG2pMapperUpdateDefaultBody
type PutG2pMapperUpdateDefaultBody struct {

	// message
	Message *PutG2pMapperUpdateDefaultBodyMessage `json:"message,omitempty"`
}

// Validate validates this put g2p mapper update default body
func (o *PutG2pMapperUpdateDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateDefaultBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put_g2p_mapper_update default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("put_g2p_mapper_update default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put g2p mapper update default body based on the context it is used
func (o *PutG2pMapperUpdateDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateDefaultBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put_g2p_mapper_update default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("put_g2p_mapper_update default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateDefaultBody) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateDefaultBodyMessage put g2p mapper update default body message
//
// swagger:model PutG2pMapperUpdateDefaultBodyMessage
type PutG2pMapperUpdateDefaultBodyMessage struct {

	// ack status
	AckStatus models.Ack `json:"ack_status,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp models.Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this put g2p mapper update default body message
func (o *PutG2pMapperUpdateDefaultBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAckStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) validateAckStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AckStatus) { // not required
		return nil
	}

	if err := o.AckStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := o.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this put g2p mapper update default body message based on the context it is used
func (o *PutG2pMapperUpdateDefaultBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAckStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) contextValidateAckStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := o.AckStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateDefaultBodyMessage) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("put_g2p_mapper_update default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateDefaultBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateDefaultBodyMessage) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateDefaultBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateForbiddenBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PutG2pMapperUpdateForbiddenBody
type PutG2pMapperUpdateForbiddenBody struct {

	// error
	Error *PutG2pMapperUpdateForbiddenBodyError `json:"error,omitempty"`
}

// Validate validates this put g2p mapper update forbidden body
func (o *PutG2pMapperUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateForbiddenBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put g2p mapper update forbidden body based on the context it is used
func (o *PutG2pMapperUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateForbiddenBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateForbiddenBodyError put g2p mapper update forbidden body error
//
// swagger:model PutG2pMapperUpdateForbiddenBodyError
type PutG2pMapperUpdateForbiddenBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this put g2p mapper update forbidden body error
func (o *PutG2pMapperUpdateForbiddenBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put g2p mapper update forbidden body error based on context it is used
func (o *PutG2pMapperUpdateForbiddenBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateInternalServerErrorBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PutG2pMapperUpdateInternalServerErrorBody
type PutG2pMapperUpdateInternalServerErrorBody struct {

	// error
	Error *PutG2pMapperUpdateInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this put g2p mapper update internal server error body
func (o *PutG2pMapperUpdateInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put g2p mapper update internal server error body based on the context it is used
func (o *PutG2pMapperUpdateInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateInternalServerErrorBodyError put g2p mapper update internal server error body error
//
// swagger:model PutG2pMapperUpdateInternalServerErrorBodyError
type PutG2pMapperUpdateInternalServerErrorBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this put g2p mapper update internal server error body error
func (o *PutG2pMapperUpdateInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put g2p mapper update internal server error body error based on context it is used
func (o *PutG2pMapperUpdateInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateParamsBodyMessage put g2p mapper update params body message
//
// swagger:model PutG2pMapperUpdateParamsBodyMessage
type PutG2pMapperUpdateParamsBodyMessage struct {

	// transaction id
	// Required: true
	TransactionID *models.TransactionID `json:"transaction_id"`

	// update request
	// Required: true
	UpdateRequest []*models.UpdateRequest `json:"update_request"`
}

// Validate validates this put g2p mapper update params body message
func (o *PutG2pMapperUpdateParamsBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateParamsBodyMessage) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if o.TransactionID != nil {
		if err := o.TransactionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateParamsBodyMessage) validateUpdateRequest(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"update_request", "body", o.UpdateRequest); err != nil {
		return err
	}

	for i := 0; i < len(o.UpdateRequest); i++ {
		if swag.IsZero(o.UpdateRequest[i]) { // not required
			continue
		}

		if o.UpdateRequest[i] != nil {
			if err := o.UpdateRequest[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "update_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "update_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put g2p mapper update params body message based on the context it is used
func (o *PutG2pMapperUpdateParamsBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpdateRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateParamsBodyMessage) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionID != nil {
		if err := o.TransactionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

func (o *PutG2pMapperUpdateParamsBodyMessage) contextValidateUpdateRequest(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UpdateRequest); i++ {

		if o.UpdateRequest[i] != nil {
			if err := o.UpdateRequest[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "update_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "update_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateParamsBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateParamsBodyMessage) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateParamsBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateUnauthorizedBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PutG2pMapperUpdateUnauthorizedBody
type PutG2pMapperUpdateUnauthorizedBody struct {

	// error
	Error *PutG2pMapperUpdateUnauthorizedBodyError `json:"error,omitempty"`
}

// Validate validates this put g2p mapper update unauthorized body
func (o *PutG2pMapperUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put g2p mapper update unauthorized body based on the context it is used
func (o *PutG2pMapperUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutG2pMapperUpdateUnauthorizedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putG2pMapperUpdateUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putG2pMapperUpdateUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutG2pMapperUpdateUnauthorizedBodyError put g2p mapper update unauthorized body error
//
// swagger:model PutG2pMapperUpdateUnauthorizedBodyError
type PutG2pMapperUpdateUnauthorizedBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this put g2p mapper update unauthorized body error
func (o *PutG2pMapperUpdateUnauthorizedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put g2p mapper update unauthorized body error based on context it is used
func (o *PutG2pMapperUpdateUnauthorizedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutG2pMapperUpdateUnauthorizedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutG2pMapperUpdateUnauthorizedBodyError) UnmarshalBinary(b []byte) error {
	var res PutG2pMapperUpdateUnauthorizedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
