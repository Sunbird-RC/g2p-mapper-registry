// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sunbirdrc/mapper-service/swagger_gen/models"
)

// PostG2pMapperResolveHandlerFunc turns a function with the right signature into a post g2p mapper resolve handler
type PostG2pMapperResolveHandlerFunc func(PostG2pMapperResolveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostG2pMapperResolveHandlerFunc) Handle(params PostG2pMapperResolveParams) middleware.Responder {
	return fn(params)
}

// PostG2pMapperResolveHandler interface for that can handle valid post g2p mapper resolve params
type PostG2pMapperResolveHandler interface {
	Handle(PostG2pMapperResolveParams) middleware.Responder
}

// NewPostG2pMapperResolve creates a new http.Handler for the post g2p mapper resolve operation
func NewPostG2pMapperResolve(ctx *middleware.Context, handler PostG2pMapperResolveHandler) *PostG2pMapperResolve {
	return &PostG2pMapperResolve{Context: ctx, Handler: handler}
}

/*
	PostG2pMapperResolve swagger:route POST /mapper/resolve postG2pMapperResolve

FAMAP-RSLV : /mapper/resolve

Resolve fa / beneficiary id to a store of value
*/
type PostG2pMapperResolve struct {
	Context *middleware.Context
	Handler PostG2pMapperResolveHandler
}

func (o *PostG2pMapperResolve) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostG2pMapperResolveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostG2pMapperResolveBody post g2p mapper resolve body
//
// swagger:model PostG2pMapperResolveBody
type PostG2pMapperResolveBody struct {

	// header
	// Required: true
	Header struct {
		models.MsgHeader
	} `json:"header"`

	// message
	// Required: true
	Message *PostG2pMapperResolveParamsBodyMessage `json:"message"`

	// signature
	Signature models.MsgSignature `json:"signature,omitempty"`
}

// Validate validates this post g2p mapper resolve body
func (o *PostG2pMapperResolveBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveBody) validateHeader(formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperResolveBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperResolveBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if err := o.Signature.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve body based on the context it is used
func (o *PostG2pMapperResolveBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveBody) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *PostG2pMapperResolveBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperResolveBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Signature.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "signature")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "signature")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveDefaultBody post g2p mapper resolve default body
//
// swagger:model PostG2pMapperResolveDefaultBody
type PostG2pMapperResolveDefaultBody struct {

	// message
	Message *PostG2pMapperResolveDefaultBodyMessage `json:"message,omitempty"`
}

// Validate validates this post g2p mapper resolve default body
func (o *PostG2pMapperResolveDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveDefaultBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	if o.Message != nil {
		if err := o.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve default body based on the context it is used
func (o *PostG2pMapperResolveDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveDefaultBody) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if o.Message != nil {
		if err := o.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveDefaultBodyMessage post g2p mapper resolve default body message
//
// swagger:model PostG2pMapperResolveDefaultBodyMessage
type PostG2pMapperResolveDefaultBodyMessage struct {

	// ack status
	AckStatus models.Ack `json:"ack_status,omitempty"`

	// error
	Error *models.Error `json:"error,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp models.Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this post g2p mapper resolve default body message
func (o *PostG2pMapperResolveDefaultBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAckStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) validateAckStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AckStatus) { // not required
		return nil
	}

	if err := o.AckStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := o.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve default body message based on the context it is used
func (o *PostG2pMapperResolveDefaultBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAckStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) contextValidateAckStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := o.AckStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "ack_status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "ack_status")
		}
		return err
	}

	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PostG2pMapperResolveDefaultBodyMessage) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timestamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "timestamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("post_g2p_mapper_resolve default" + "." + "message" + "." + "timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveDefaultBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveDefaultBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveDefaultBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveForbiddenBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperResolveForbiddenBody
type PostG2pMapperResolveForbiddenBody struct {

	// error
	Error *PostG2pMapperResolveForbiddenBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper resolve forbidden body
func (o *PostG2pMapperResolveForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveForbiddenBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve forbidden body based on the context it is used
func (o *PostG2pMapperResolveForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveForbiddenBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveForbidden" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveForbiddenBodyError post g2p mapper resolve forbidden body error
//
// swagger:model PostG2pMapperResolveForbiddenBodyError
type PostG2pMapperResolveForbiddenBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper resolve forbidden body error
func (o *PostG2pMapperResolveForbiddenBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper resolve forbidden body error based on context it is used
func (o *PostG2pMapperResolveForbiddenBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveInternalServerErrorBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperResolveInternalServerErrorBody
type PostG2pMapperResolveInternalServerErrorBody struct {

	// error
	Error *PostG2pMapperResolveInternalServerErrorBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper resolve internal server error body
func (o *PostG2pMapperResolveInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveInternalServerErrorBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve internal server error body based on the context it is used
func (o *PostG2pMapperResolveInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveInternalServerErrorBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveInternalServerError" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveInternalServerErrorBodyError post g2p mapper resolve internal server error body error
//
// swagger:model PostG2pMapperResolveInternalServerErrorBodyError
type PostG2pMapperResolveInternalServerErrorBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper resolve internal server error body error
func (o *PostG2pMapperResolveInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper resolve internal server error body error based on context it is used
func (o *PostG2pMapperResolveInternalServerErrorBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveParamsBodyMessage post g2p mapper resolve params body message
//
// swagger:model PostG2pMapperResolveParamsBodyMessage
type PostG2pMapperResolveParamsBodyMessage struct {

	// resolve request
	// Required: true
	ResolveRequest []*models.ResolveRequest `json:"resolve_request"`

	// transaction id
	// Required: true
	TransactionID *models.TransactionID `json:"transaction_id"`
}

// Validate validates this post g2p mapper resolve params body message
func (o *PostG2pMapperResolveParamsBodyMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResolveRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveParamsBodyMessage) validateResolveRequest(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"resolve_request", "body", o.ResolveRequest); err != nil {
		return err
	}

	for i := 0; i < len(o.ResolveRequest); i++ {
		if swag.IsZero(o.ResolveRequest[i]) { // not required
			continue
		}

		if o.ResolveRequest[i] != nil {
			if err := o.ResolveRequest[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "resolve_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "resolve_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostG2pMapperResolveParamsBodyMessage) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"message"+"."+"transaction_id", "body", o.TransactionID); err != nil {
		return err
	}

	if o.TransactionID != nil {
		if err := o.TransactionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve params body message based on the context it is used
func (o *PostG2pMapperResolveParamsBodyMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResolveRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveParamsBodyMessage) contextValidateResolveRequest(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ResolveRequest); i++ {

		if o.ResolveRequest[i] != nil {
			if err := o.ResolveRequest[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "message" + "." + "resolve_request" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "message" + "." + "resolve_request" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostG2pMapperResolveParamsBodyMessage) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if o.TransactionID != nil {
		if err := o.TransactionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "message" + "." + "transaction_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "message" + "." + "transaction_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveParamsBodyMessage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveParamsBodyMessage) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveParamsBodyMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveUnauthorizedBody HTTP transport layer error codes. Used by components like gateways, LB responding with HTTP status codes 1xx, 2xx, 3xx, 4xx and 5xx
//
// swagger:model PostG2pMapperResolveUnauthorizedBody
type PostG2pMapperResolveUnauthorizedBody struct {

	// error
	Error *PostG2pMapperResolveUnauthorizedBodyError `json:"error,omitempty"`
}

// Validate validates this post g2p mapper resolve unauthorized body
func (o *PostG2pMapperResolveUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveUnauthorizedBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post g2p mapper resolve unauthorized body based on the context it is used
func (o *PostG2pMapperResolveUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostG2pMapperResolveUnauthorizedBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postG2pMapperResolveUnauthorized" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postG2pMapperResolveUnauthorized" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostG2pMapperResolveUnauthorizedBodyError post g2p mapper resolve unauthorized body error
//
// swagger:model PostG2pMapperResolveUnauthorizedBodyError
type PostG2pMapperResolveUnauthorizedBodyError struct {

	// error code
	Code string `json:"code,omitempty"`

	// error message
	Message string `json:"message,omitempty"`
}

// Validate validates this post g2p mapper resolve unauthorized body error
func (o *PostG2pMapperResolveUnauthorizedBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post g2p mapper resolve unauthorized body error based on context it is used
func (o *PostG2pMapperResolveUnauthorizedBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostG2pMapperResolveUnauthorizedBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostG2pMapperResolveUnauthorizedBodyError) UnmarshalBinary(b []byte) error {
	var res PostG2pMapperResolveUnauthorizedBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
